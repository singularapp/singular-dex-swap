/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace GlvDeposit {
  export type AddressesStruct = {
    glv: AddressLike;
    account: AddressLike;
    receiver: AddressLike;
    callbackContract: AddressLike;
    uiFeeReceiver: AddressLike;
    market: AddressLike;
    initialLongToken: AddressLike;
    initialShortToken: AddressLike;
    longTokenSwapPath: AddressLike[];
    shortTokenSwapPath: AddressLike[];
  };

  export type AddressesStructOutput = [
    glv: string,
    account: string,
    receiver: string,
    callbackContract: string,
    uiFeeReceiver: string,
    market: string,
    initialLongToken: string,
    initialShortToken: string,
    longTokenSwapPath: string[],
    shortTokenSwapPath: string[]
  ] & {
    glv: string;
    account: string;
    receiver: string;
    callbackContract: string;
    uiFeeReceiver: string;
    market: string;
    initialLongToken: string;
    initialShortToken: string;
    longTokenSwapPath: string[];
    shortTokenSwapPath: string[];
  };

  export type NumbersStruct = {
    marketTokenAmount: BigNumberish;
    initialLongTokenAmount: BigNumberish;
    initialShortTokenAmount: BigNumberish;
    minGlvTokens: BigNumberish;
    updatedAtTime: BigNumberish;
    executionFee: BigNumberish;
    callbackGasLimit: BigNumberish;
  };

  export type NumbersStructOutput = [
    marketTokenAmount: bigint,
    initialLongTokenAmount: bigint,
    initialShortTokenAmount: bigint,
    minGlvTokens: bigint,
    updatedAtTime: bigint,
    executionFee: bigint,
    callbackGasLimit: bigint
  ] & {
    marketTokenAmount: bigint;
    initialLongTokenAmount: bigint;
    initialShortTokenAmount: bigint;
    minGlvTokens: bigint;
    updatedAtTime: bigint;
    executionFee: bigint;
    callbackGasLimit: bigint;
  };

  export type FlagsStruct = {
    shouldUnwrapNativeToken: boolean;
    isMarketTokenDeposit: boolean;
  };

  export type FlagsStructOutput = [
    shouldUnwrapNativeToken: boolean,
    isMarketTokenDeposit: boolean
  ] & { shouldUnwrapNativeToken: boolean; isMarketTokenDeposit: boolean };

  export type PropsStruct = {
    addresses: GlvDeposit.AddressesStruct;
    numbers: GlvDeposit.NumbersStruct;
    flags: GlvDeposit.FlagsStruct;
  };

  export type PropsStructOutput = [
    addresses: GlvDeposit.AddressesStructOutput,
    numbers: GlvDeposit.NumbersStructOutput,
    flags: GlvDeposit.FlagsStructOutput
  ] & {
    addresses: GlvDeposit.AddressesStructOutput;
    numbers: GlvDeposit.NumbersStructOutput;
    flags: GlvDeposit.FlagsStructOutput;
  };
}

export declare namespace GlvWithdrawal {
  export type AddressesStruct = {
    glv: AddressLike;
    market: AddressLike;
    account: AddressLike;
    receiver: AddressLike;
    callbackContract: AddressLike;
    uiFeeReceiver: AddressLike;
    longTokenSwapPath: AddressLike[];
    shortTokenSwapPath: AddressLike[];
  };

  export type AddressesStructOutput = [
    glv: string,
    market: string,
    account: string,
    receiver: string,
    callbackContract: string,
    uiFeeReceiver: string,
    longTokenSwapPath: string[],
    shortTokenSwapPath: string[]
  ] & {
    glv: string;
    market: string;
    account: string;
    receiver: string;
    callbackContract: string;
    uiFeeReceiver: string;
    longTokenSwapPath: string[];
    shortTokenSwapPath: string[];
  };

  export type NumbersStruct = {
    glvTokenAmount: BigNumberish;
    minLongTokenAmount: BigNumberish;
    minShortTokenAmount: BigNumberish;
    updatedAtTime: BigNumberish;
    executionFee: BigNumberish;
    callbackGasLimit: BigNumberish;
  };

  export type NumbersStructOutput = [
    glvTokenAmount: bigint,
    minLongTokenAmount: bigint,
    minShortTokenAmount: bigint,
    updatedAtTime: bigint,
    executionFee: bigint,
    callbackGasLimit: bigint
  ] & {
    glvTokenAmount: bigint;
    minLongTokenAmount: bigint;
    minShortTokenAmount: bigint;
    updatedAtTime: bigint;
    executionFee: bigint;
    callbackGasLimit: bigint;
  };

  export type FlagsStruct = { shouldUnwrapNativeToken: boolean };

  export type FlagsStructOutput = [shouldUnwrapNativeToken: boolean] & {
    shouldUnwrapNativeToken: boolean;
  };

  export type PropsStruct = {
    addresses: GlvWithdrawal.AddressesStruct;
    numbers: GlvWithdrawal.NumbersStruct;
    flags: GlvWithdrawal.FlagsStruct;
  };

  export type PropsStructOutput = [
    addresses: GlvWithdrawal.AddressesStructOutput,
    numbers: GlvWithdrawal.NumbersStructOutput,
    flags: GlvWithdrawal.FlagsStructOutput
  ] & {
    addresses: GlvWithdrawal.AddressesStructOutput;
    numbers: GlvWithdrawal.NumbersStructOutput;
    flags: GlvWithdrawal.FlagsStructOutput;
  };
}

export declare namespace Glv {
  export type PropsStruct = {
    glvToken: AddressLike;
    longToken: AddressLike;
    shortToken: AddressLike;
  };

  export type PropsStructOutput = [
    glvToken: string,
    longToken: string,
    shortToken: string
  ] & { glvToken: string; longToken: string; shortToken: string };
}

export declare namespace GlvReader {
  export type GlvInfoStruct = { glv: Glv.PropsStruct; markets: AddressLike[] };

  export type GlvInfoStructOutput = [
    glv: Glv.PropsStructOutput,
    markets: string[]
  ] & { glv: Glv.PropsStructOutput; markets: string[] };
}

export declare namespace GlvShift {
  export type AddressesStruct = {
    glv: AddressLike;
    fromMarket: AddressLike;
    toMarket: AddressLike;
  };

  export type AddressesStructOutput = [
    glv: string,
    fromMarket: string,
    toMarket: string
  ] & { glv: string; fromMarket: string; toMarket: string };

  export type NumbersStruct = {
    marketTokenAmount: BigNumberish;
    minMarketTokens: BigNumberish;
    updatedAtTime: BigNumberish;
  };

  export type NumbersStructOutput = [
    marketTokenAmount: bigint,
    minMarketTokens: bigint,
    updatedAtTime: bigint
  ] & {
    marketTokenAmount: bigint;
    minMarketTokens: bigint;
    updatedAtTime: bigint;
  };

  export type PropsStruct = {
    addresses: GlvShift.AddressesStruct;
    numbers: GlvShift.NumbersStruct;
  };

  export type PropsStructOutput = [
    addresses: GlvShift.AddressesStructOutput,
    numbers: GlvShift.NumbersStructOutput
  ] & {
    addresses: GlvShift.AddressesStructOutput;
    numbers: GlvShift.NumbersStructOutput;
  };
}

export declare namespace Price {
  export type PropsStruct = { min: BigNumberish; max: BigNumberish };

  export type PropsStructOutput = [min: bigint, max: bigint] & {
    min: bigint;
    max: bigint;
  };
}

export interface GlvReaderInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "getAccountGlvDeposits"
      | "getAccountGlvWithdrawals"
      | "getGlv"
      | "getGlvBySalt"
      | "getGlvDeposit"
      | "getGlvDeposits"
      | "getGlvInfo"
      | "getGlvInfoList"
      | "getGlvShift"
      | "getGlvShifts"
      | "getGlvTokenPrice"
      | "getGlvValue"
      | "getGlvWithdrawal"
      | "getGlvWithdrawals"
      | "getGlvs"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "getAccountGlvDeposits",
    values: [AddressLike, AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getAccountGlvWithdrawals",
    values: [AddressLike, AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getGlv",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getGlvBySalt",
    values: [AddressLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getGlvDeposit",
    values: [AddressLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getGlvDeposits",
    values: [AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getGlvInfo",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getGlvInfoList",
    values: [AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getGlvShift",
    values: [AddressLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getGlvShifts",
    values: [AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getGlvTokenPrice",
    values: [
      AddressLike,
      AddressLike[],
      Price.PropsStruct[],
      Price.PropsStruct,
      Price.PropsStruct,
      AddressLike,
      boolean
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getGlvValue",
    values: [
      AddressLike,
      AddressLike[],
      Price.PropsStruct[],
      Price.PropsStruct,
      Price.PropsStruct,
      AddressLike,
      boolean
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getGlvWithdrawal",
    values: [AddressLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getGlvWithdrawals",
    values: [AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getGlvs",
    values: [AddressLike, BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "getAccountGlvDeposits",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAccountGlvWithdrawals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getGlv", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getGlvBySalt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getGlvDeposit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getGlvDeposits",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getGlvInfo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getGlvInfoList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getGlvShift",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getGlvShifts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getGlvTokenPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getGlvValue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getGlvWithdrawal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getGlvWithdrawals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getGlvs", data: BytesLike): Result;
}

export interface GlvReader extends BaseContract {
  connect(runner?: ContractRunner | null): GlvReader;
  waitForDeployment(): Promise<this>;

  interface: GlvReaderInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  getAccountGlvDeposits: TypedContractMethod<
    [
      dataStore: AddressLike,
      account: AddressLike,
      start: BigNumberish,
      end: BigNumberish
    ],
    [GlvDeposit.PropsStructOutput[]],
    "view"
  >;

  getAccountGlvWithdrawals: TypedContractMethod<
    [
      dataStore: AddressLike,
      account: AddressLike,
      start: BigNumberish,
      end: BigNumberish
    ],
    [GlvWithdrawal.PropsStructOutput[]],
    "view"
  >;

  getGlv: TypedContractMethod<
    [dataStore: AddressLike, glv: AddressLike],
    [Glv.PropsStructOutput],
    "view"
  >;

  getGlvBySalt: TypedContractMethod<
    [dataStore: AddressLike, salt: BytesLike],
    [Glv.PropsStructOutput],
    "view"
  >;

  getGlvDeposit: TypedContractMethod<
    [dataStore: AddressLike, key: BytesLike],
    [GlvDeposit.PropsStructOutput],
    "view"
  >;

  getGlvDeposits: TypedContractMethod<
    [dataStore: AddressLike, start: BigNumberish, end: BigNumberish],
    [GlvDeposit.PropsStructOutput[]],
    "view"
  >;

  getGlvInfo: TypedContractMethod<
    [dataStore: AddressLike, glv: AddressLike],
    [GlvReader.GlvInfoStructOutput],
    "view"
  >;

  getGlvInfoList: TypedContractMethod<
    [dataStore: AddressLike, start: BigNumberish, end: BigNumberish],
    [GlvReader.GlvInfoStructOutput[]],
    "view"
  >;

  getGlvShift: TypedContractMethod<
    [dataStore: AddressLike, key: BytesLike],
    [GlvShift.PropsStructOutput],
    "view"
  >;

  getGlvShifts: TypedContractMethod<
    [dataStore: AddressLike, start: BigNumberish, end: BigNumberish],
    [GlvShift.PropsStructOutput[]],
    "view"
  >;

  getGlvTokenPrice: TypedContractMethod<
    [
      dataStore: AddressLike,
      marketAddresses: AddressLike[],
      indexTokenPrices: Price.PropsStruct[],
      longTokenPrice: Price.PropsStruct,
      shortTokenPrice: Price.PropsStruct,
      glv: AddressLike,
      maximize: boolean
    ],
    [[bigint, bigint, bigint]],
    "view"
  >;

  getGlvValue: TypedContractMethod<
    [
      dataStore: AddressLike,
      marketAddresses: AddressLike[],
      indexTokenPrices: Price.PropsStruct[],
      longTokenPrice: Price.PropsStruct,
      shortTokenPrice: Price.PropsStruct,
      glv: AddressLike,
      maximize: boolean
    ],
    [bigint],
    "view"
  >;

  getGlvWithdrawal: TypedContractMethod<
    [dataStore: AddressLike, key: BytesLike],
    [GlvWithdrawal.PropsStructOutput],
    "view"
  >;

  getGlvWithdrawals: TypedContractMethod<
    [dataStore: AddressLike, start: BigNumberish, end: BigNumberish],
    [GlvWithdrawal.PropsStructOutput[]],
    "view"
  >;

  getGlvs: TypedContractMethod<
    [dataStore: AddressLike, start: BigNumberish, end: BigNumberish],
    [Glv.PropsStructOutput[]],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "getAccountGlvDeposits"
  ): TypedContractMethod<
    [
      dataStore: AddressLike,
      account: AddressLike,
      start: BigNumberish,
      end: BigNumberish
    ],
    [GlvDeposit.PropsStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getAccountGlvWithdrawals"
  ): TypedContractMethod<
    [
      dataStore: AddressLike,
      account: AddressLike,
      start: BigNumberish,
      end: BigNumberish
    ],
    [GlvWithdrawal.PropsStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getGlv"
  ): TypedContractMethod<
    [dataStore: AddressLike, glv: AddressLike],
    [Glv.PropsStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getGlvBySalt"
  ): TypedContractMethod<
    [dataStore: AddressLike, salt: BytesLike],
    [Glv.PropsStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getGlvDeposit"
  ): TypedContractMethod<
    [dataStore: AddressLike, key: BytesLike],
    [GlvDeposit.PropsStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getGlvDeposits"
  ): TypedContractMethod<
    [dataStore: AddressLike, start: BigNumberish, end: BigNumberish],
    [GlvDeposit.PropsStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getGlvInfo"
  ): TypedContractMethod<
    [dataStore: AddressLike, glv: AddressLike],
    [GlvReader.GlvInfoStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getGlvInfoList"
  ): TypedContractMethod<
    [dataStore: AddressLike, start: BigNumberish, end: BigNumberish],
    [GlvReader.GlvInfoStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getGlvShift"
  ): TypedContractMethod<
    [dataStore: AddressLike, key: BytesLike],
    [GlvShift.PropsStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getGlvShifts"
  ): TypedContractMethod<
    [dataStore: AddressLike, start: BigNumberish, end: BigNumberish],
    [GlvShift.PropsStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getGlvTokenPrice"
  ): TypedContractMethod<
    [
      dataStore: AddressLike,
      marketAddresses: AddressLike[],
      indexTokenPrices: Price.PropsStruct[],
      longTokenPrice: Price.PropsStruct,
      shortTokenPrice: Price.PropsStruct,
      glv: AddressLike,
      maximize: boolean
    ],
    [[bigint, bigint, bigint]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getGlvValue"
  ): TypedContractMethod<
    [
      dataStore: AddressLike,
      marketAddresses: AddressLike[],
      indexTokenPrices: Price.PropsStruct[],
      longTokenPrice: Price.PropsStruct,
      shortTokenPrice: Price.PropsStruct,
      glv: AddressLike,
      maximize: boolean
    ],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getGlvWithdrawal"
  ): TypedContractMethod<
    [dataStore: AddressLike, key: BytesLike],
    [GlvWithdrawal.PropsStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getGlvWithdrawals"
  ): TypedContractMethod<
    [dataStore: AddressLike, start: BigNumberish, end: BigNumberish],
    [GlvWithdrawal.PropsStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getGlvs"
  ): TypedContractMethod<
    [dataStore: AddressLike, start: BigNumberish, end: BigNumberish],
    [Glv.PropsStructOutput[]],
    "view"
  >;

  filters: {};
}
