/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface PositionRouterInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "BASIS_POINTS_DIVISOR"
      | "admin"
      | "approve"
      | "callbackGasLimit"
      | "cancelDecreasePosition"
      | "cancelIncreasePosition"
      | "createDecreasePosition"
      | "createIncreasePosition"
      | "createIncreasePositionETH"
      | "decreasePositionRequestKeys"
      | "decreasePositionRequestKeysStart"
      | "decreasePositionRequests"
      | "decreasePositionsIndex"
      | "depositFee"
      | "executeDecreasePosition"
      | "executeDecreasePositions"
      | "executeIncreasePosition"
      | "executeIncreasePositions"
      | "feeReserves"
      | "getDecreasePositionRequestPath"
      | "getIncreasePositionRequestPath"
      | "getRequestKey"
      | "getRequestQueueLengths"
      | "gov"
      | "increasePositionBufferBps"
      | "increasePositionRequestKeys"
      | "increasePositionRequestKeysStart"
      | "increasePositionRequests"
      | "increasePositionsIndex"
      | "isLeverageEnabled"
      | "isPositionKeeper"
      | "maxGlobalLongSizes"
      | "maxGlobalShortSizes"
      | "maxTimeDelay"
      | "minBlockDelayKeeper"
      | "minExecutionFee"
      | "minTimeDelayPublic"
      | "referralStorage"
      | "router"
      | "sendValue"
      | "setAdmin"
      | "setCallbackGasLimit"
      | "setDelayValues"
      | "setDepositFee"
      | "setGov"
      | "setIncreasePositionBufferBps"
      | "setIsLeverageEnabled"
      | "setMaxGlobalSizes"
      | "setMinExecutionFee"
      | "setPositionKeeper"
      | "setReferralStorage"
      | "setRequestKeysStartValues"
      | "shortsTracker"
      | "vault"
      | "weth"
      | "withdrawFees"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "Callback"
      | "CancelDecreasePosition"
      | "CancelIncreasePosition"
      | "CreateDecreasePosition"
      | "CreateIncreasePosition"
      | "DecreasePositionReferral"
      | "ExecuteDecreasePosition"
      | "ExecuteIncreasePosition"
      | "IncreasePositionReferral"
      | "SetAdmin"
      | "SetCallbackGasLimit"
      | "SetDelayValues"
      | "SetDepositFee"
      | "SetIncreasePositionBufferBps"
      | "SetIsLeverageEnabled"
      | "SetMaxGlobalSizes"
      | "SetMinExecutionFee"
      | "SetPositionKeeper"
      | "SetReferralStorage"
      | "SetRequestKeysStartValues"
      | "WithdrawFees"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "BASIS_POINTS_DIVISOR",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "admin", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "callbackGasLimit",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "cancelDecreasePosition",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelIncreasePosition",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "createDecreasePosition",
    values: [
      AddressLike[],
      AddressLike,
      BigNumberish,
      BigNumberish,
      boolean,
      AddressLike,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      boolean,
      AddressLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "createIncreasePosition",
    values: [
      AddressLike[],
      AddressLike,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      boolean,
      BigNumberish,
      BigNumberish,
      BytesLike,
      AddressLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "createIncreasePositionETH",
    values: [
      AddressLike[],
      AddressLike,
      BigNumberish,
      BigNumberish,
      boolean,
      BigNumberish,
      BigNumberish,
      BytesLike,
      AddressLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "decreasePositionRequestKeys",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "decreasePositionRequestKeysStart",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "decreasePositionRequests",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "decreasePositionsIndex",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "depositFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "executeDecreasePosition",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "executeDecreasePositions",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "executeIncreasePosition",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "executeIncreasePositions",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "feeReserves",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getDecreasePositionRequestPath",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getIncreasePositionRequestPath",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getRequestKey",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRequestQueueLengths",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "gov", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "increasePositionBufferBps",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "increasePositionRequestKeys",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "increasePositionRequestKeysStart",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "increasePositionRequests",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "increasePositionsIndex",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isLeverageEnabled",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isPositionKeeper",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "maxGlobalLongSizes",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "maxGlobalShortSizes",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "maxTimeDelay",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "minBlockDelayKeeper",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "minExecutionFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "minTimeDelayPublic",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "referralStorage",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "router", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "sendValue",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setAdmin",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setCallbackGasLimit",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setDelayValues",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setDepositFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "setGov", values: [AddressLike]): string;
  encodeFunctionData(
    functionFragment: "setIncreasePositionBufferBps",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setIsLeverageEnabled",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxGlobalSizes",
    values: [AddressLike[], BigNumberish[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setMinExecutionFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setPositionKeeper",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setReferralStorage",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setRequestKeysStartValues",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "shortsTracker",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "vault", values?: undefined): string;
  encodeFunctionData(functionFragment: "weth", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "withdrawFees",
    values: [AddressLike, AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "BASIS_POINTS_DIVISOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "admin", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "callbackGasLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelDecreasePosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelIncreasePosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createDecreasePosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createIncreasePosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createIncreasePositionETH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "decreasePositionRequestKeys",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "decreasePositionRequestKeysStart",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "decreasePositionRequests",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "decreasePositionsIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "depositFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "executeDecreasePosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeDecreasePositions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeIncreasePosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeIncreasePositions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "feeReserves",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDecreasePositionRequestPath",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getIncreasePositionRequestPath",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRequestKey",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRequestQueueLengths",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "gov", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "increasePositionBufferBps",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "increasePositionRequestKeys",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "increasePositionRequestKeysStart",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "increasePositionRequests",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "increasePositionsIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isLeverageEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isPositionKeeper",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxGlobalLongSizes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxGlobalShortSizes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxTimeDelay",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minBlockDelayKeeper",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minExecutionFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minTimeDelayPublic",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "referralStorage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "router", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "sendValue", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setAdmin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setCallbackGasLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDelayValues",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDepositFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setGov", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setIncreasePositionBufferBps",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setIsLeverageEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaxGlobalSizes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMinExecutionFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPositionKeeper",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setReferralStorage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRequestKeysStartValues",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "shortsTracker",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "vault", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "weth", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawFees",
    data: BytesLike
  ): Result;
}

export namespace CallbackEvent {
  export type InputTuple = [callbackTarget: AddressLike, success: boolean];
  export type OutputTuple = [callbackTarget: string, success: boolean];
  export interface OutputObject {
    callbackTarget: string;
    success: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CancelDecreasePositionEvent {
  export type InputTuple = [
    account: AddressLike,
    path: AddressLike[],
    indexToken: AddressLike,
    collateralDelta: BigNumberish,
    sizeDelta: BigNumberish,
    isLong: boolean,
    receiver: AddressLike,
    acceptablePrice: BigNumberish,
    minOut: BigNumberish,
    executionFee: BigNumberish,
    blockGap: BigNumberish,
    timeGap: BigNumberish
  ];
  export type OutputTuple = [
    account: string,
    path: string[],
    indexToken: string,
    collateralDelta: bigint,
    sizeDelta: bigint,
    isLong: boolean,
    receiver: string,
    acceptablePrice: bigint,
    minOut: bigint,
    executionFee: bigint,
    blockGap: bigint,
    timeGap: bigint
  ];
  export interface OutputObject {
    account: string;
    path: string[];
    indexToken: string;
    collateralDelta: bigint;
    sizeDelta: bigint;
    isLong: boolean;
    receiver: string;
    acceptablePrice: bigint;
    minOut: bigint;
    executionFee: bigint;
    blockGap: bigint;
    timeGap: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CancelIncreasePositionEvent {
  export type InputTuple = [
    account: AddressLike,
    path: AddressLike[],
    indexToken: AddressLike,
    amountIn: BigNumberish,
    minOut: BigNumberish,
    sizeDelta: BigNumberish,
    isLong: boolean,
    acceptablePrice: BigNumberish,
    executionFee: BigNumberish,
    blockGap: BigNumberish,
    timeGap: BigNumberish
  ];
  export type OutputTuple = [
    account: string,
    path: string[],
    indexToken: string,
    amountIn: bigint,
    minOut: bigint,
    sizeDelta: bigint,
    isLong: boolean,
    acceptablePrice: bigint,
    executionFee: bigint,
    blockGap: bigint,
    timeGap: bigint
  ];
  export interface OutputObject {
    account: string;
    path: string[];
    indexToken: string;
    amountIn: bigint;
    minOut: bigint;
    sizeDelta: bigint;
    isLong: boolean;
    acceptablePrice: bigint;
    executionFee: bigint;
    blockGap: bigint;
    timeGap: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CreateDecreasePositionEvent {
  export type InputTuple = [
    account: AddressLike,
    path: AddressLike[],
    indexToken: AddressLike,
    collateralDelta: BigNumberish,
    sizeDelta: BigNumberish,
    isLong: boolean,
    receiver: AddressLike,
    acceptablePrice: BigNumberish,
    minOut: BigNumberish,
    executionFee: BigNumberish,
    index: BigNumberish,
    queueIndex: BigNumberish,
    blockNumber: BigNumberish,
    blockTime: BigNumberish
  ];
  export type OutputTuple = [
    account: string,
    path: string[],
    indexToken: string,
    collateralDelta: bigint,
    sizeDelta: bigint,
    isLong: boolean,
    receiver: string,
    acceptablePrice: bigint,
    minOut: bigint,
    executionFee: bigint,
    index: bigint,
    queueIndex: bigint,
    blockNumber: bigint,
    blockTime: bigint
  ];
  export interface OutputObject {
    account: string;
    path: string[];
    indexToken: string;
    collateralDelta: bigint;
    sizeDelta: bigint;
    isLong: boolean;
    receiver: string;
    acceptablePrice: bigint;
    minOut: bigint;
    executionFee: bigint;
    index: bigint;
    queueIndex: bigint;
    blockNumber: bigint;
    blockTime: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CreateIncreasePositionEvent {
  export type InputTuple = [
    account: AddressLike,
    path: AddressLike[],
    indexToken: AddressLike,
    amountIn: BigNumberish,
    minOut: BigNumberish,
    sizeDelta: BigNumberish,
    isLong: boolean,
    acceptablePrice: BigNumberish,
    executionFee: BigNumberish,
    index: BigNumberish,
    queueIndex: BigNumberish,
    blockNumber: BigNumberish,
    blockTime: BigNumberish,
    gasPrice: BigNumberish
  ];
  export type OutputTuple = [
    account: string,
    path: string[],
    indexToken: string,
    amountIn: bigint,
    minOut: bigint,
    sizeDelta: bigint,
    isLong: boolean,
    acceptablePrice: bigint,
    executionFee: bigint,
    index: bigint,
    queueIndex: bigint,
    blockNumber: bigint,
    blockTime: bigint,
    gasPrice: bigint
  ];
  export interface OutputObject {
    account: string;
    path: string[];
    indexToken: string;
    amountIn: bigint;
    minOut: bigint;
    sizeDelta: bigint;
    isLong: boolean;
    acceptablePrice: bigint;
    executionFee: bigint;
    index: bigint;
    queueIndex: bigint;
    blockNumber: bigint;
    blockTime: bigint;
    gasPrice: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DecreasePositionReferralEvent {
  export type InputTuple = [
    account: AddressLike,
    sizeDelta: BigNumberish,
    marginFeeBasisPoints: BigNumberish,
    referralCode: BytesLike,
    referrer: AddressLike
  ];
  export type OutputTuple = [
    account: string,
    sizeDelta: bigint,
    marginFeeBasisPoints: bigint,
    referralCode: string,
    referrer: string
  ];
  export interface OutputObject {
    account: string;
    sizeDelta: bigint;
    marginFeeBasisPoints: bigint;
    referralCode: string;
    referrer: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ExecuteDecreasePositionEvent {
  export type InputTuple = [
    account: AddressLike,
    path: AddressLike[],
    indexToken: AddressLike,
    collateralDelta: BigNumberish,
    sizeDelta: BigNumberish,
    isLong: boolean,
    receiver: AddressLike,
    acceptablePrice: BigNumberish,
    minOut: BigNumberish,
    executionFee: BigNumberish,
    blockGap: BigNumberish,
    timeGap: BigNumberish
  ];
  export type OutputTuple = [
    account: string,
    path: string[],
    indexToken: string,
    collateralDelta: bigint,
    sizeDelta: bigint,
    isLong: boolean,
    receiver: string,
    acceptablePrice: bigint,
    minOut: bigint,
    executionFee: bigint,
    blockGap: bigint,
    timeGap: bigint
  ];
  export interface OutputObject {
    account: string;
    path: string[];
    indexToken: string;
    collateralDelta: bigint;
    sizeDelta: bigint;
    isLong: boolean;
    receiver: string;
    acceptablePrice: bigint;
    minOut: bigint;
    executionFee: bigint;
    blockGap: bigint;
    timeGap: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ExecuteIncreasePositionEvent {
  export type InputTuple = [
    account: AddressLike,
    path: AddressLike[],
    indexToken: AddressLike,
    amountIn: BigNumberish,
    minOut: BigNumberish,
    sizeDelta: BigNumberish,
    isLong: boolean,
    acceptablePrice: BigNumberish,
    executionFee: BigNumberish,
    blockGap: BigNumberish,
    timeGap: BigNumberish
  ];
  export type OutputTuple = [
    account: string,
    path: string[],
    indexToken: string,
    amountIn: bigint,
    minOut: bigint,
    sizeDelta: bigint,
    isLong: boolean,
    acceptablePrice: bigint,
    executionFee: bigint,
    blockGap: bigint,
    timeGap: bigint
  ];
  export interface OutputObject {
    account: string;
    path: string[];
    indexToken: string;
    amountIn: bigint;
    minOut: bigint;
    sizeDelta: bigint;
    isLong: boolean;
    acceptablePrice: bigint;
    executionFee: bigint;
    blockGap: bigint;
    timeGap: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace IncreasePositionReferralEvent {
  export type InputTuple = [
    account: AddressLike,
    sizeDelta: BigNumberish,
    marginFeeBasisPoints: BigNumberish,
    referralCode: BytesLike,
    referrer: AddressLike
  ];
  export type OutputTuple = [
    account: string,
    sizeDelta: bigint,
    marginFeeBasisPoints: bigint,
    referralCode: string,
    referrer: string
  ];
  export interface OutputObject {
    account: string;
    sizeDelta: bigint;
    marginFeeBasisPoints: bigint;
    referralCode: string;
    referrer: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SetAdminEvent {
  export type InputTuple = [admin: AddressLike];
  export type OutputTuple = [admin: string];
  export interface OutputObject {
    admin: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SetCallbackGasLimitEvent {
  export type InputTuple = [callbackGasLimit: BigNumberish];
  export type OutputTuple = [callbackGasLimit: bigint];
  export interface OutputObject {
    callbackGasLimit: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SetDelayValuesEvent {
  export type InputTuple = [
    minBlockDelayKeeper: BigNumberish,
    minTimeDelayPublic: BigNumberish,
    maxTimeDelay: BigNumberish
  ];
  export type OutputTuple = [
    minBlockDelayKeeper: bigint,
    minTimeDelayPublic: bigint,
    maxTimeDelay: bigint
  ];
  export interface OutputObject {
    minBlockDelayKeeper: bigint;
    minTimeDelayPublic: bigint;
    maxTimeDelay: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SetDepositFeeEvent {
  export type InputTuple = [depositFee: BigNumberish];
  export type OutputTuple = [depositFee: bigint];
  export interface OutputObject {
    depositFee: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SetIncreasePositionBufferBpsEvent {
  export type InputTuple = [increasePositionBufferBps: BigNumberish];
  export type OutputTuple = [increasePositionBufferBps: bigint];
  export interface OutputObject {
    increasePositionBufferBps: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SetIsLeverageEnabledEvent {
  export type InputTuple = [isLeverageEnabled: boolean];
  export type OutputTuple = [isLeverageEnabled: boolean];
  export interface OutputObject {
    isLeverageEnabled: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SetMaxGlobalSizesEvent {
  export type InputTuple = [
    tokens: AddressLike[],
    longSizes: BigNumberish[],
    shortSizes: BigNumberish[]
  ];
  export type OutputTuple = [
    tokens: string[],
    longSizes: bigint[],
    shortSizes: bigint[]
  ];
  export interface OutputObject {
    tokens: string[];
    longSizes: bigint[];
    shortSizes: bigint[];
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SetMinExecutionFeeEvent {
  export type InputTuple = [minExecutionFee: BigNumberish];
  export type OutputTuple = [minExecutionFee: bigint];
  export interface OutputObject {
    minExecutionFee: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SetPositionKeeperEvent {
  export type InputTuple = [account: AddressLike, isActive: boolean];
  export type OutputTuple = [account: string, isActive: boolean];
  export interface OutputObject {
    account: string;
    isActive: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SetReferralStorageEvent {
  export type InputTuple = [referralStorage: AddressLike];
  export type OutputTuple = [referralStorage: string];
  export interface OutputObject {
    referralStorage: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SetRequestKeysStartValuesEvent {
  export type InputTuple = [
    increasePositionRequestKeysStart: BigNumberish,
    decreasePositionRequestKeysStart: BigNumberish
  ];
  export type OutputTuple = [
    increasePositionRequestKeysStart: bigint,
    decreasePositionRequestKeysStart: bigint
  ];
  export interface OutputObject {
    increasePositionRequestKeysStart: bigint;
    decreasePositionRequestKeysStart: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WithdrawFeesEvent {
  export type InputTuple = [
    token: AddressLike,
    receiver: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [token: string, receiver: string, amount: bigint];
  export interface OutputObject {
    token: string;
    receiver: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface PositionRouter extends BaseContract {
  connect(runner?: ContractRunner | null): PositionRouter;
  waitForDeployment(): Promise<this>;

  interface: PositionRouterInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  BASIS_POINTS_DIVISOR: TypedContractMethod<[], [bigint], "view">;

  admin: TypedContractMethod<[], [string], "view">;

  approve: TypedContractMethod<
    [_token: AddressLike, _spender: AddressLike, _amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  callbackGasLimit: TypedContractMethod<[], [bigint], "view">;

  cancelDecreasePosition: TypedContractMethod<
    [_key: BytesLike, _executionFeeReceiver: AddressLike],
    [boolean],
    "nonpayable"
  >;

  cancelIncreasePosition: TypedContractMethod<
    [_key: BytesLike, _executionFeeReceiver: AddressLike],
    [boolean],
    "nonpayable"
  >;

  createDecreasePosition: TypedContractMethod<
    [
      _path: AddressLike[],
      _indexToken: AddressLike,
      _collateralDelta: BigNumberish,
      _sizeDelta: BigNumberish,
      _isLong: boolean,
      _receiver: AddressLike,
      _acceptablePrice: BigNumberish,
      _minOut: BigNumberish,
      _executionFee: BigNumberish,
      _withdrawETH: boolean,
      _callbackTarget: AddressLike
    ],
    [string],
    "payable"
  >;

  createIncreasePosition: TypedContractMethod<
    [
      _path: AddressLike[],
      _indexToken: AddressLike,
      _amountIn: BigNumberish,
      _minOut: BigNumberish,
      _sizeDelta: BigNumberish,
      _isLong: boolean,
      _acceptablePrice: BigNumberish,
      _executionFee: BigNumberish,
      _referralCode: BytesLike,
      _callbackTarget: AddressLike
    ],
    [string],
    "payable"
  >;

  createIncreasePositionETH: TypedContractMethod<
    [
      _path: AddressLike[],
      _indexToken: AddressLike,
      _minOut: BigNumberish,
      _sizeDelta: BigNumberish,
      _isLong: boolean,
      _acceptablePrice: BigNumberish,
      _executionFee: BigNumberish,
      _referralCode: BytesLike,
      _callbackTarget: AddressLike
    ],
    [string],
    "payable"
  >;

  decreasePositionRequestKeys: TypedContractMethod<
    [arg0: BigNumberish],
    [string],
    "view"
  >;

  decreasePositionRequestKeysStart: TypedContractMethod<[], [bigint], "view">;

  decreasePositionRequests: TypedContractMethod<
    [arg0: BytesLike],
    [
      [
        string,
        string,
        bigint,
        bigint,
        boolean,
        string,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        boolean,
        string
      ] & {
        account: string;
        indexToken: string;
        collateralDelta: bigint;
        sizeDelta: bigint;
        isLong: boolean;
        receiver: string;
        acceptablePrice: bigint;
        minOut: bigint;
        executionFee: bigint;
        blockNumber: bigint;
        blockTime: bigint;
        withdrawETH: boolean;
        callbackTarget: string;
      }
    ],
    "view"
  >;

  decreasePositionsIndex: TypedContractMethod<
    [arg0: AddressLike],
    [bigint],
    "view"
  >;

  depositFee: TypedContractMethod<[], [bigint], "view">;

  executeDecreasePosition: TypedContractMethod<
    [_key: BytesLike, _executionFeeReceiver: AddressLike],
    [boolean],
    "nonpayable"
  >;

  executeDecreasePositions: TypedContractMethod<
    [_endIndex: BigNumberish, _executionFeeReceiver: AddressLike],
    [void],
    "nonpayable"
  >;

  executeIncreasePosition: TypedContractMethod<
    [_key: BytesLike, _executionFeeReceiver: AddressLike],
    [boolean],
    "nonpayable"
  >;

  executeIncreasePositions: TypedContractMethod<
    [_endIndex: BigNumberish, _executionFeeReceiver: AddressLike],
    [void],
    "nonpayable"
  >;

  feeReserves: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  getDecreasePositionRequestPath: TypedContractMethod<
    [_key: BytesLike],
    [string[]],
    "view"
  >;

  getIncreasePositionRequestPath: TypedContractMethod<
    [_key: BytesLike],
    [string[]],
    "view"
  >;

  getRequestKey: TypedContractMethod<
    [_account: AddressLike, _index: BigNumberish],
    [string],
    "view"
  >;

  getRequestQueueLengths: TypedContractMethod<
    [],
    [[bigint, bigint, bigint, bigint]],
    "view"
  >;

  gov: TypedContractMethod<[], [string], "view">;

  increasePositionBufferBps: TypedContractMethod<[], [bigint], "view">;

  increasePositionRequestKeys: TypedContractMethod<
    [arg0: BigNumberish],
    [string],
    "view"
  >;

  increasePositionRequestKeysStart: TypedContractMethod<[], [bigint], "view">;

  increasePositionRequests: TypedContractMethod<
    [arg0: BytesLike],
    [
      [
        string,
        string,
        bigint,
        bigint,
        bigint,
        boolean,
        bigint,
        bigint,
        bigint,
        bigint,
        boolean,
        string
      ] & {
        account: string;
        indexToken: string;
        amountIn: bigint;
        minOut: bigint;
        sizeDelta: bigint;
        isLong: boolean;
        acceptablePrice: bigint;
        executionFee: bigint;
        blockNumber: bigint;
        blockTime: bigint;
        hasCollateralInETH: boolean;
        callbackTarget: string;
      }
    ],
    "view"
  >;

  increasePositionsIndex: TypedContractMethod<
    [arg0: AddressLike],
    [bigint],
    "view"
  >;

  isLeverageEnabled: TypedContractMethod<[], [boolean], "view">;

  isPositionKeeper: TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

  maxGlobalLongSizes: TypedContractMethod<
    [arg0: AddressLike],
    [bigint],
    "view"
  >;

  maxGlobalShortSizes: TypedContractMethod<
    [arg0: AddressLike],
    [bigint],
    "view"
  >;

  maxTimeDelay: TypedContractMethod<[], [bigint], "view">;

  minBlockDelayKeeper: TypedContractMethod<[], [bigint], "view">;

  minExecutionFee: TypedContractMethod<[], [bigint], "view">;

  minTimeDelayPublic: TypedContractMethod<[], [bigint], "view">;

  referralStorage: TypedContractMethod<[], [string], "view">;

  router: TypedContractMethod<[], [string], "view">;

  sendValue: TypedContractMethod<
    [_receiver: AddressLike, _amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  setAdmin: TypedContractMethod<[_admin: AddressLike], [void], "nonpayable">;

  setCallbackGasLimit: TypedContractMethod<
    [_callbackGasLimit: BigNumberish],
    [void],
    "nonpayable"
  >;

  setDelayValues: TypedContractMethod<
    [
      _minBlockDelayKeeper: BigNumberish,
      _minTimeDelayPublic: BigNumberish,
      _maxTimeDelay: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  setDepositFee: TypedContractMethod<
    [_depositFee: BigNumberish],
    [void],
    "nonpayable"
  >;

  setGov: TypedContractMethod<[_gov: AddressLike], [void], "nonpayable">;

  setIncreasePositionBufferBps: TypedContractMethod<
    [_increasePositionBufferBps: BigNumberish],
    [void],
    "nonpayable"
  >;

  setIsLeverageEnabled: TypedContractMethod<
    [_isLeverageEnabled: boolean],
    [void],
    "nonpayable"
  >;

  setMaxGlobalSizes: TypedContractMethod<
    [
      _tokens: AddressLike[],
      _longSizes: BigNumberish[],
      _shortSizes: BigNumberish[]
    ],
    [void],
    "nonpayable"
  >;

  setMinExecutionFee: TypedContractMethod<
    [_minExecutionFee: BigNumberish],
    [void],
    "nonpayable"
  >;

  setPositionKeeper: TypedContractMethod<
    [_account: AddressLike, _isActive: boolean],
    [void],
    "nonpayable"
  >;

  setReferralStorage: TypedContractMethod<
    [_referralStorage: AddressLike],
    [void],
    "nonpayable"
  >;

  setRequestKeysStartValues: TypedContractMethod<
    [
      _increasePositionRequestKeysStart: BigNumberish,
      _decreasePositionRequestKeysStart: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  shortsTracker: TypedContractMethod<[], [string], "view">;

  vault: TypedContractMethod<[], [string], "view">;

  weth: TypedContractMethod<[], [string], "view">;

  withdrawFees: TypedContractMethod<
    [_token: AddressLike, _receiver: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "BASIS_POINTS_DIVISOR"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "admin"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "approve"
  ): TypedContractMethod<
    [_token: AddressLike, _spender: AddressLike, _amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "callbackGasLimit"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "cancelDecreasePosition"
  ): TypedContractMethod<
    [_key: BytesLike, _executionFeeReceiver: AddressLike],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "cancelIncreasePosition"
  ): TypedContractMethod<
    [_key: BytesLike, _executionFeeReceiver: AddressLike],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "createDecreasePosition"
  ): TypedContractMethod<
    [
      _path: AddressLike[],
      _indexToken: AddressLike,
      _collateralDelta: BigNumberish,
      _sizeDelta: BigNumberish,
      _isLong: boolean,
      _receiver: AddressLike,
      _acceptablePrice: BigNumberish,
      _minOut: BigNumberish,
      _executionFee: BigNumberish,
      _withdrawETH: boolean,
      _callbackTarget: AddressLike
    ],
    [string],
    "payable"
  >;
  getFunction(
    nameOrSignature: "createIncreasePosition"
  ): TypedContractMethod<
    [
      _path: AddressLike[],
      _indexToken: AddressLike,
      _amountIn: BigNumberish,
      _minOut: BigNumberish,
      _sizeDelta: BigNumberish,
      _isLong: boolean,
      _acceptablePrice: BigNumberish,
      _executionFee: BigNumberish,
      _referralCode: BytesLike,
      _callbackTarget: AddressLike
    ],
    [string],
    "payable"
  >;
  getFunction(
    nameOrSignature: "createIncreasePositionETH"
  ): TypedContractMethod<
    [
      _path: AddressLike[],
      _indexToken: AddressLike,
      _minOut: BigNumberish,
      _sizeDelta: BigNumberish,
      _isLong: boolean,
      _acceptablePrice: BigNumberish,
      _executionFee: BigNumberish,
      _referralCode: BytesLike,
      _callbackTarget: AddressLike
    ],
    [string],
    "payable"
  >;
  getFunction(
    nameOrSignature: "decreasePositionRequestKeys"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "decreasePositionRequestKeysStart"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "decreasePositionRequests"
  ): TypedContractMethod<
    [arg0: BytesLike],
    [
      [
        string,
        string,
        bigint,
        bigint,
        boolean,
        string,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        boolean,
        string
      ] & {
        account: string;
        indexToken: string;
        collateralDelta: bigint;
        sizeDelta: bigint;
        isLong: boolean;
        receiver: string;
        acceptablePrice: bigint;
        minOut: bigint;
        executionFee: bigint;
        blockNumber: bigint;
        blockTime: bigint;
        withdrawETH: boolean;
        callbackTarget: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "decreasePositionsIndex"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "depositFee"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "executeDecreasePosition"
  ): TypedContractMethod<
    [_key: BytesLike, _executionFeeReceiver: AddressLike],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "executeDecreasePositions"
  ): TypedContractMethod<
    [_endIndex: BigNumberish, _executionFeeReceiver: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "executeIncreasePosition"
  ): TypedContractMethod<
    [_key: BytesLike, _executionFeeReceiver: AddressLike],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "executeIncreasePositions"
  ): TypedContractMethod<
    [_endIndex: BigNumberish, _executionFeeReceiver: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "feeReserves"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getDecreasePositionRequestPath"
  ): TypedContractMethod<[_key: BytesLike], [string[]], "view">;
  getFunction(
    nameOrSignature: "getIncreasePositionRequestPath"
  ): TypedContractMethod<[_key: BytesLike], [string[]], "view">;
  getFunction(
    nameOrSignature: "getRequestKey"
  ): TypedContractMethod<
    [_account: AddressLike, _index: BigNumberish],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "getRequestQueueLengths"
  ): TypedContractMethod<[], [[bigint, bigint, bigint, bigint]], "view">;
  getFunction(
    nameOrSignature: "gov"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "increasePositionBufferBps"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "increasePositionRequestKeys"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "increasePositionRequestKeysStart"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "increasePositionRequests"
  ): TypedContractMethod<
    [arg0: BytesLike],
    [
      [
        string,
        string,
        bigint,
        bigint,
        bigint,
        boolean,
        bigint,
        bigint,
        bigint,
        bigint,
        boolean,
        string
      ] & {
        account: string;
        indexToken: string;
        amountIn: bigint;
        minOut: bigint;
        sizeDelta: bigint;
        isLong: boolean;
        acceptablePrice: bigint;
        executionFee: bigint;
        blockNumber: bigint;
        blockTime: bigint;
        hasCollateralInETH: boolean;
        callbackTarget: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "increasePositionsIndex"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "isLeverageEnabled"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "isPositionKeeper"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "maxGlobalLongSizes"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "maxGlobalShortSizes"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "maxTimeDelay"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "minBlockDelayKeeper"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "minExecutionFee"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "minTimeDelayPublic"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "referralStorage"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "router"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "sendValue"
  ): TypedContractMethod<
    [_receiver: AddressLike, _amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setAdmin"
  ): TypedContractMethod<[_admin: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setCallbackGasLimit"
  ): TypedContractMethod<
    [_callbackGasLimit: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setDelayValues"
  ): TypedContractMethod<
    [
      _minBlockDelayKeeper: BigNumberish,
      _minTimeDelayPublic: BigNumberish,
      _maxTimeDelay: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setDepositFee"
  ): TypedContractMethod<[_depositFee: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setGov"
  ): TypedContractMethod<[_gov: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setIncreasePositionBufferBps"
  ): TypedContractMethod<
    [_increasePositionBufferBps: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setIsLeverageEnabled"
  ): TypedContractMethod<[_isLeverageEnabled: boolean], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setMaxGlobalSizes"
  ): TypedContractMethod<
    [
      _tokens: AddressLike[],
      _longSizes: BigNumberish[],
      _shortSizes: BigNumberish[]
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setMinExecutionFee"
  ): TypedContractMethod<
    [_minExecutionFee: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setPositionKeeper"
  ): TypedContractMethod<
    [_account: AddressLike, _isActive: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setReferralStorage"
  ): TypedContractMethod<[_referralStorage: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setRequestKeysStartValues"
  ): TypedContractMethod<
    [
      _increasePositionRequestKeysStart: BigNumberish,
      _decreasePositionRequestKeysStart: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "shortsTracker"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "vault"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "weth"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "withdrawFees"
  ): TypedContractMethod<
    [_token: AddressLike, _receiver: AddressLike],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "Callback"
  ): TypedContractEvent<
    CallbackEvent.InputTuple,
    CallbackEvent.OutputTuple,
    CallbackEvent.OutputObject
  >;
  getEvent(
    key: "CancelDecreasePosition"
  ): TypedContractEvent<
    CancelDecreasePositionEvent.InputTuple,
    CancelDecreasePositionEvent.OutputTuple,
    CancelDecreasePositionEvent.OutputObject
  >;
  getEvent(
    key: "CancelIncreasePosition"
  ): TypedContractEvent<
    CancelIncreasePositionEvent.InputTuple,
    CancelIncreasePositionEvent.OutputTuple,
    CancelIncreasePositionEvent.OutputObject
  >;
  getEvent(
    key: "CreateDecreasePosition"
  ): TypedContractEvent<
    CreateDecreasePositionEvent.InputTuple,
    CreateDecreasePositionEvent.OutputTuple,
    CreateDecreasePositionEvent.OutputObject
  >;
  getEvent(
    key: "CreateIncreasePosition"
  ): TypedContractEvent<
    CreateIncreasePositionEvent.InputTuple,
    CreateIncreasePositionEvent.OutputTuple,
    CreateIncreasePositionEvent.OutputObject
  >;
  getEvent(
    key: "DecreasePositionReferral"
  ): TypedContractEvent<
    DecreasePositionReferralEvent.InputTuple,
    DecreasePositionReferralEvent.OutputTuple,
    DecreasePositionReferralEvent.OutputObject
  >;
  getEvent(
    key: "ExecuteDecreasePosition"
  ): TypedContractEvent<
    ExecuteDecreasePositionEvent.InputTuple,
    ExecuteDecreasePositionEvent.OutputTuple,
    ExecuteDecreasePositionEvent.OutputObject
  >;
  getEvent(
    key: "ExecuteIncreasePosition"
  ): TypedContractEvent<
    ExecuteIncreasePositionEvent.InputTuple,
    ExecuteIncreasePositionEvent.OutputTuple,
    ExecuteIncreasePositionEvent.OutputObject
  >;
  getEvent(
    key: "IncreasePositionReferral"
  ): TypedContractEvent<
    IncreasePositionReferralEvent.InputTuple,
    IncreasePositionReferralEvent.OutputTuple,
    IncreasePositionReferralEvent.OutputObject
  >;
  getEvent(
    key: "SetAdmin"
  ): TypedContractEvent<
    SetAdminEvent.InputTuple,
    SetAdminEvent.OutputTuple,
    SetAdminEvent.OutputObject
  >;
  getEvent(
    key: "SetCallbackGasLimit"
  ): TypedContractEvent<
    SetCallbackGasLimitEvent.InputTuple,
    SetCallbackGasLimitEvent.OutputTuple,
    SetCallbackGasLimitEvent.OutputObject
  >;
  getEvent(
    key: "SetDelayValues"
  ): TypedContractEvent<
    SetDelayValuesEvent.InputTuple,
    SetDelayValuesEvent.OutputTuple,
    SetDelayValuesEvent.OutputObject
  >;
  getEvent(
    key: "SetDepositFee"
  ): TypedContractEvent<
    SetDepositFeeEvent.InputTuple,
    SetDepositFeeEvent.OutputTuple,
    SetDepositFeeEvent.OutputObject
  >;
  getEvent(
    key: "SetIncreasePositionBufferBps"
  ): TypedContractEvent<
    SetIncreasePositionBufferBpsEvent.InputTuple,
    SetIncreasePositionBufferBpsEvent.OutputTuple,
    SetIncreasePositionBufferBpsEvent.OutputObject
  >;
  getEvent(
    key: "SetIsLeverageEnabled"
  ): TypedContractEvent<
    SetIsLeverageEnabledEvent.InputTuple,
    SetIsLeverageEnabledEvent.OutputTuple,
    SetIsLeverageEnabledEvent.OutputObject
  >;
  getEvent(
    key: "SetMaxGlobalSizes"
  ): TypedContractEvent<
    SetMaxGlobalSizesEvent.InputTuple,
    SetMaxGlobalSizesEvent.OutputTuple,
    SetMaxGlobalSizesEvent.OutputObject
  >;
  getEvent(
    key: "SetMinExecutionFee"
  ): TypedContractEvent<
    SetMinExecutionFeeEvent.InputTuple,
    SetMinExecutionFeeEvent.OutputTuple,
    SetMinExecutionFeeEvent.OutputObject
  >;
  getEvent(
    key: "SetPositionKeeper"
  ): TypedContractEvent<
    SetPositionKeeperEvent.InputTuple,
    SetPositionKeeperEvent.OutputTuple,
    SetPositionKeeperEvent.OutputObject
  >;
  getEvent(
    key: "SetReferralStorage"
  ): TypedContractEvent<
    SetReferralStorageEvent.InputTuple,
    SetReferralStorageEvent.OutputTuple,
    SetReferralStorageEvent.OutputObject
  >;
  getEvent(
    key: "SetRequestKeysStartValues"
  ): TypedContractEvent<
    SetRequestKeysStartValuesEvent.InputTuple,
    SetRequestKeysStartValuesEvent.OutputTuple,
    SetRequestKeysStartValuesEvent.OutputObject
  >;
  getEvent(
    key: "WithdrawFees"
  ): TypedContractEvent<
    WithdrawFeesEvent.InputTuple,
    WithdrawFeesEvent.OutputTuple,
    WithdrawFeesEvent.OutputObject
  >;

  filters: {
    "Callback(address,bool)": TypedContractEvent<
      CallbackEvent.InputTuple,
      CallbackEvent.OutputTuple,
      CallbackEvent.OutputObject
    >;
    Callback: TypedContractEvent<
      CallbackEvent.InputTuple,
      CallbackEvent.OutputTuple,
      CallbackEvent.OutputObject
    >;

    "CancelDecreasePosition(address,address[],address,uint256,uint256,bool,address,uint256,uint256,uint256,uint256,uint256)": TypedContractEvent<
      CancelDecreasePositionEvent.InputTuple,
      CancelDecreasePositionEvent.OutputTuple,
      CancelDecreasePositionEvent.OutputObject
    >;
    CancelDecreasePosition: TypedContractEvent<
      CancelDecreasePositionEvent.InputTuple,
      CancelDecreasePositionEvent.OutputTuple,
      CancelDecreasePositionEvent.OutputObject
    >;

    "CancelIncreasePosition(address,address[],address,uint256,uint256,uint256,bool,uint256,uint256,uint256,uint256)": TypedContractEvent<
      CancelIncreasePositionEvent.InputTuple,
      CancelIncreasePositionEvent.OutputTuple,
      CancelIncreasePositionEvent.OutputObject
    >;
    CancelIncreasePosition: TypedContractEvent<
      CancelIncreasePositionEvent.InputTuple,
      CancelIncreasePositionEvent.OutputTuple,
      CancelIncreasePositionEvent.OutputObject
    >;

    "CreateDecreasePosition(address,address[],address,uint256,uint256,bool,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256)": TypedContractEvent<
      CreateDecreasePositionEvent.InputTuple,
      CreateDecreasePositionEvent.OutputTuple,
      CreateDecreasePositionEvent.OutputObject
    >;
    CreateDecreasePosition: TypedContractEvent<
      CreateDecreasePositionEvent.InputTuple,
      CreateDecreasePositionEvent.OutputTuple,
      CreateDecreasePositionEvent.OutputObject
    >;

    "CreateIncreasePosition(address,address[],address,uint256,uint256,uint256,bool,uint256,uint256,uint256,uint256,uint256,uint256,uint256)": TypedContractEvent<
      CreateIncreasePositionEvent.InputTuple,
      CreateIncreasePositionEvent.OutputTuple,
      CreateIncreasePositionEvent.OutputObject
    >;
    CreateIncreasePosition: TypedContractEvent<
      CreateIncreasePositionEvent.InputTuple,
      CreateIncreasePositionEvent.OutputTuple,
      CreateIncreasePositionEvent.OutputObject
    >;

    "DecreasePositionReferral(address,uint256,uint256,bytes32,address)": TypedContractEvent<
      DecreasePositionReferralEvent.InputTuple,
      DecreasePositionReferralEvent.OutputTuple,
      DecreasePositionReferralEvent.OutputObject
    >;
    DecreasePositionReferral: TypedContractEvent<
      DecreasePositionReferralEvent.InputTuple,
      DecreasePositionReferralEvent.OutputTuple,
      DecreasePositionReferralEvent.OutputObject
    >;

    "ExecuteDecreasePosition(address,address[],address,uint256,uint256,bool,address,uint256,uint256,uint256,uint256,uint256)": TypedContractEvent<
      ExecuteDecreasePositionEvent.InputTuple,
      ExecuteDecreasePositionEvent.OutputTuple,
      ExecuteDecreasePositionEvent.OutputObject
    >;
    ExecuteDecreasePosition: TypedContractEvent<
      ExecuteDecreasePositionEvent.InputTuple,
      ExecuteDecreasePositionEvent.OutputTuple,
      ExecuteDecreasePositionEvent.OutputObject
    >;

    "ExecuteIncreasePosition(address,address[],address,uint256,uint256,uint256,bool,uint256,uint256,uint256,uint256)": TypedContractEvent<
      ExecuteIncreasePositionEvent.InputTuple,
      ExecuteIncreasePositionEvent.OutputTuple,
      ExecuteIncreasePositionEvent.OutputObject
    >;
    ExecuteIncreasePosition: TypedContractEvent<
      ExecuteIncreasePositionEvent.InputTuple,
      ExecuteIncreasePositionEvent.OutputTuple,
      ExecuteIncreasePositionEvent.OutputObject
    >;

    "IncreasePositionReferral(address,uint256,uint256,bytes32,address)": TypedContractEvent<
      IncreasePositionReferralEvent.InputTuple,
      IncreasePositionReferralEvent.OutputTuple,
      IncreasePositionReferralEvent.OutputObject
    >;
    IncreasePositionReferral: TypedContractEvent<
      IncreasePositionReferralEvent.InputTuple,
      IncreasePositionReferralEvent.OutputTuple,
      IncreasePositionReferralEvent.OutputObject
    >;

    "SetAdmin(address)": TypedContractEvent<
      SetAdminEvent.InputTuple,
      SetAdminEvent.OutputTuple,
      SetAdminEvent.OutputObject
    >;
    SetAdmin: TypedContractEvent<
      SetAdminEvent.InputTuple,
      SetAdminEvent.OutputTuple,
      SetAdminEvent.OutputObject
    >;

    "SetCallbackGasLimit(uint256)": TypedContractEvent<
      SetCallbackGasLimitEvent.InputTuple,
      SetCallbackGasLimitEvent.OutputTuple,
      SetCallbackGasLimitEvent.OutputObject
    >;
    SetCallbackGasLimit: TypedContractEvent<
      SetCallbackGasLimitEvent.InputTuple,
      SetCallbackGasLimitEvent.OutputTuple,
      SetCallbackGasLimitEvent.OutputObject
    >;

    "SetDelayValues(uint256,uint256,uint256)": TypedContractEvent<
      SetDelayValuesEvent.InputTuple,
      SetDelayValuesEvent.OutputTuple,
      SetDelayValuesEvent.OutputObject
    >;
    SetDelayValues: TypedContractEvent<
      SetDelayValuesEvent.InputTuple,
      SetDelayValuesEvent.OutputTuple,
      SetDelayValuesEvent.OutputObject
    >;

    "SetDepositFee(uint256)": TypedContractEvent<
      SetDepositFeeEvent.InputTuple,
      SetDepositFeeEvent.OutputTuple,
      SetDepositFeeEvent.OutputObject
    >;
    SetDepositFee: TypedContractEvent<
      SetDepositFeeEvent.InputTuple,
      SetDepositFeeEvent.OutputTuple,
      SetDepositFeeEvent.OutputObject
    >;

    "SetIncreasePositionBufferBps(uint256)": TypedContractEvent<
      SetIncreasePositionBufferBpsEvent.InputTuple,
      SetIncreasePositionBufferBpsEvent.OutputTuple,
      SetIncreasePositionBufferBpsEvent.OutputObject
    >;
    SetIncreasePositionBufferBps: TypedContractEvent<
      SetIncreasePositionBufferBpsEvent.InputTuple,
      SetIncreasePositionBufferBpsEvent.OutputTuple,
      SetIncreasePositionBufferBpsEvent.OutputObject
    >;

    "SetIsLeverageEnabled(bool)": TypedContractEvent<
      SetIsLeverageEnabledEvent.InputTuple,
      SetIsLeverageEnabledEvent.OutputTuple,
      SetIsLeverageEnabledEvent.OutputObject
    >;
    SetIsLeverageEnabled: TypedContractEvent<
      SetIsLeverageEnabledEvent.InputTuple,
      SetIsLeverageEnabledEvent.OutputTuple,
      SetIsLeverageEnabledEvent.OutputObject
    >;

    "SetMaxGlobalSizes(address[],uint256[],uint256[])": TypedContractEvent<
      SetMaxGlobalSizesEvent.InputTuple,
      SetMaxGlobalSizesEvent.OutputTuple,
      SetMaxGlobalSizesEvent.OutputObject
    >;
    SetMaxGlobalSizes: TypedContractEvent<
      SetMaxGlobalSizesEvent.InputTuple,
      SetMaxGlobalSizesEvent.OutputTuple,
      SetMaxGlobalSizesEvent.OutputObject
    >;

    "SetMinExecutionFee(uint256)": TypedContractEvent<
      SetMinExecutionFeeEvent.InputTuple,
      SetMinExecutionFeeEvent.OutputTuple,
      SetMinExecutionFeeEvent.OutputObject
    >;
    SetMinExecutionFee: TypedContractEvent<
      SetMinExecutionFeeEvent.InputTuple,
      SetMinExecutionFeeEvent.OutputTuple,
      SetMinExecutionFeeEvent.OutputObject
    >;

    "SetPositionKeeper(address,bool)": TypedContractEvent<
      SetPositionKeeperEvent.InputTuple,
      SetPositionKeeperEvent.OutputTuple,
      SetPositionKeeperEvent.OutputObject
    >;
    SetPositionKeeper: TypedContractEvent<
      SetPositionKeeperEvent.InputTuple,
      SetPositionKeeperEvent.OutputTuple,
      SetPositionKeeperEvent.OutputObject
    >;

    "SetReferralStorage(address)": TypedContractEvent<
      SetReferralStorageEvent.InputTuple,
      SetReferralStorageEvent.OutputTuple,
      SetReferralStorageEvent.OutputObject
    >;
    SetReferralStorage: TypedContractEvent<
      SetReferralStorageEvent.InputTuple,
      SetReferralStorageEvent.OutputTuple,
      SetReferralStorageEvent.OutputObject
    >;

    "SetRequestKeysStartValues(uint256,uint256)": TypedContractEvent<
      SetRequestKeysStartValuesEvent.InputTuple,
      SetRequestKeysStartValuesEvent.OutputTuple,
      SetRequestKeysStartValuesEvent.OutputObject
    >;
    SetRequestKeysStartValues: TypedContractEvent<
      SetRequestKeysStartValuesEvent.InputTuple,
      SetRequestKeysStartValuesEvent.OutputTuple,
      SetRequestKeysStartValuesEvent.OutputObject
    >;

    "WithdrawFees(address,address,uint256)": TypedContractEvent<
      WithdrawFeesEvent.InputTuple,
      WithdrawFeesEvent.OutputTuple,
      WithdrawFeesEvent.OutputObject
    >;
    WithdrawFees: TypedContractEvent<
      WithdrawFeesEvent.InputTuple,
      WithdrawFeesEvent.OutputTuple,
      WithdrawFeesEvent.OutputObject
    >;
  };
}
