/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface TreasuryInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "addLiquidity"
      | "addWhitelists"
      | "busd"
      | "busdBasisPoints"
      | "busdHardCap"
      | "busdReceived"
      | "busdSlotCap"
      | "endSwap"
      | "extendUnlockTime"
      | "fund"
      | "gmt"
      | "gmtListingPrice"
      | "gmtPresalePrice"
      | "gov"
      | "increaseBusdBasisPoints"
      | "initialize"
      | "isInitialized"
      | "isLiquidityAdded"
      | "isSwapActive"
      | "removeWhitelists"
      | "router"
      | "setFund"
      | "setGov"
      | "swap"
      | "swapAmounts"
      | "swapWhitelist"
      | "unlockTime"
      | "updateWhitelist"
      | "withdrawToken"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "addLiquidity",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addWhitelists",
    values: [AddressLike[]]
  ): string;
  encodeFunctionData(functionFragment: "busd", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "busdBasisPoints",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "busdHardCap",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "busdReceived",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "busdSlotCap",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "endSwap", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "extendUnlockTime",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "fund", values?: undefined): string;
  encodeFunctionData(functionFragment: "gmt", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "gmtListingPrice",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "gmtPresalePrice",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "gov", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "increaseBusdBasisPoints",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [AddressLike[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "isInitialized",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isLiquidityAdded",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isSwapActive",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "removeWhitelists",
    values: [AddressLike[]]
  ): string;
  encodeFunctionData(functionFragment: "router", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setFund",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "setGov", values: [AddressLike]): string;
  encodeFunctionData(functionFragment: "swap", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "swapAmounts",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "swapWhitelist",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "unlockTime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "updateWhitelist",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawToken",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "addLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addWhitelists",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "busd", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "busdBasisPoints",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "busdHardCap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "busdReceived",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "busdSlotCap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "endSwap", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "extendUnlockTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "fund", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "gmt", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "gmtListingPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "gmtPresalePrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "gov", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "increaseBusdBasisPoints",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isInitialized",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isLiquidityAdded",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isSwapActive",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeWhitelists",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "router", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setFund", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setGov", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "swap", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "swapAmounts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapWhitelist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unlockTime", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateWhitelist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawToken",
    data: BytesLike
  ): Result;
}

export interface Treasury extends BaseContract {
  connect(runner?: ContractRunner | null): Treasury;
  waitForDeployment(): Promise<this>;

  interface: TreasuryInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  addLiquidity: TypedContractMethod<[], [void], "nonpayable">;

  addWhitelists: TypedContractMethod<
    [_accounts: AddressLike[]],
    [void],
    "nonpayable"
  >;

  busd: TypedContractMethod<[], [string], "view">;

  busdBasisPoints: TypedContractMethod<[], [bigint], "view">;

  busdHardCap: TypedContractMethod<[], [bigint], "view">;

  busdReceived: TypedContractMethod<[], [bigint], "view">;

  busdSlotCap: TypedContractMethod<[], [bigint], "view">;

  endSwap: TypedContractMethod<[], [void], "nonpayable">;

  extendUnlockTime: TypedContractMethod<
    [_unlockTime: BigNumberish],
    [void],
    "nonpayable"
  >;

  fund: TypedContractMethod<[], [string], "view">;

  gmt: TypedContractMethod<[], [string], "view">;

  gmtListingPrice: TypedContractMethod<[], [bigint], "view">;

  gmtPresalePrice: TypedContractMethod<[], [bigint], "view">;

  gov: TypedContractMethod<[], [string], "view">;

  increaseBusdBasisPoints: TypedContractMethod<
    [_busdBasisPoints: BigNumberish],
    [void],
    "nonpayable"
  >;

  initialize: TypedContractMethod<
    [_addresses: AddressLike[], _values: BigNumberish[]],
    [void],
    "nonpayable"
  >;

  isInitialized: TypedContractMethod<[], [boolean], "view">;

  isLiquidityAdded: TypedContractMethod<[], [boolean], "view">;

  isSwapActive: TypedContractMethod<[], [boolean], "view">;

  removeWhitelists: TypedContractMethod<
    [_accounts: AddressLike[]],
    [void],
    "nonpayable"
  >;

  router: TypedContractMethod<[], [string], "view">;

  setFund: TypedContractMethod<[_fund: AddressLike], [void], "nonpayable">;

  setGov: TypedContractMethod<[_gov: AddressLike], [void], "nonpayable">;

  swap: TypedContractMethod<[_busdAmount: BigNumberish], [void], "nonpayable">;

  swapAmounts: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  swapWhitelist: TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

  unlockTime: TypedContractMethod<[], [bigint], "view">;

  updateWhitelist: TypedContractMethod<
    [prevAccount: AddressLike, nextAccount: AddressLike],
    [void],
    "nonpayable"
  >;

  withdrawToken: TypedContractMethod<
    [_token: AddressLike, _account: AddressLike, _amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "addLiquidity"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "addWhitelists"
  ): TypedContractMethod<[_accounts: AddressLike[]], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "busd"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "busdBasisPoints"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "busdHardCap"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "busdReceived"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "busdSlotCap"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "endSwap"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "extendUnlockTime"
  ): TypedContractMethod<[_unlockTime: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "fund"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "gmt"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "gmtListingPrice"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "gmtPresalePrice"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "gov"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "increaseBusdBasisPoints"
  ): TypedContractMethod<
    [_busdBasisPoints: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<
    [_addresses: AddressLike[], _values: BigNumberish[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "isInitialized"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "isLiquidityAdded"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "isSwapActive"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "removeWhitelists"
  ): TypedContractMethod<[_accounts: AddressLike[]], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "router"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "setFund"
  ): TypedContractMethod<[_fund: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setGov"
  ): TypedContractMethod<[_gov: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "swap"
  ): TypedContractMethod<[_busdAmount: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "swapAmounts"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "swapWhitelist"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "unlockTime"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "updateWhitelist"
  ): TypedContractMethod<
    [prevAccount: AddressLike, nextAccount: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "withdrawToken"
  ): TypedContractMethod<
    [_token: AddressLike, _account: AddressLike, _amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  filters: {};
}
