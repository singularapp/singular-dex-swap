/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface ReferralStorageInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "BASIS_POINTS"
      | "codeOwners"
      | "getTraderReferralInfo"
      | "gov"
      | "govSetCodeOwner"
      | "isHandler"
      | "referrerDiscountShares"
      | "referrerTiers"
      | "registerCode"
      | "setCodeOwner"
      | "setGov"
      | "setHandler"
      | "setReferrerDiscountShare"
      | "setReferrerTier"
      | "setTier"
      | "setTraderReferralCode"
      | "setTraderReferralCodeByUser"
      | "tiers"
      | "traderReferralCodes"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "GovSetCodeOwner"
      | "RegisterCode"
      | "SetCodeOwner"
      | "SetHandler"
      | "SetReferrerDiscountShare"
      | "SetReferrerTier"
      | "SetTier"
      | "SetTraderReferralCode"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "BASIS_POINTS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "codeOwners",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getTraderReferralInfo",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "gov", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "govSetCodeOwner",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isHandler",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "referrerDiscountShares",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "referrerTiers",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "registerCode",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setCodeOwner",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "setGov", values: [AddressLike]): string;
  encodeFunctionData(
    functionFragment: "setHandler",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setReferrerDiscountShare",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setReferrerTier",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setTier",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setTraderReferralCode",
    values: [AddressLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setTraderReferralCodeByUser",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "tiers", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "traderReferralCodes",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "BASIS_POINTS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "codeOwners", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getTraderReferralInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "gov", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "govSetCodeOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isHandler", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "referrerDiscountShares",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "referrerTiers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerCode",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCodeOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setGov", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setHandler", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setReferrerDiscountShare",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setReferrerTier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setTier", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setTraderReferralCode",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTraderReferralCodeByUser",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "tiers", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "traderReferralCodes",
    data: BytesLike
  ): Result;
}

export namespace GovSetCodeOwnerEvent {
  export type InputTuple = [code: BytesLike, newAccount: AddressLike];
  export type OutputTuple = [code: string, newAccount: string];
  export interface OutputObject {
    code: string;
    newAccount: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RegisterCodeEvent {
  export type InputTuple = [account: AddressLike, code: BytesLike];
  export type OutputTuple = [account: string, code: string];
  export interface OutputObject {
    account: string;
    code: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SetCodeOwnerEvent {
  export type InputTuple = [
    account: AddressLike,
    newAccount: AddressLike,
    code: BytesLike
  ];
  export type OutputTuple = [account: string, newAccount: string, code: string];
  export interface OutputObject {
    account: string;
    newAccount: string;
    code: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SetHandlerEvent {
  export type InputTuple = [handler: AddressLike, isActive: boolean];
  export type OutputTuple = [handler: string, isActive: boolean];
  export interface OutputObject {
    handler: string;
    isActive: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SetReferrerDiscountShareEvent {
  export type InputTuple = [referrer: AddressLike, discountShare: BigNumberish];
  export type OutputTuple = [referrer: string, discountShare: bigint];
  export interface OutputObject {
    referrer: string;
    discountShare: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SetReferrerTierEvent {
  export type InputTuple = [referrer: AddressLike, tierId: BigNumberish];
  export type OutputTuple = [referrer: string, tierId: bigint];
  export interface OutputObject {
    referrer: string;
    tierId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SetTierEvent {
  export type InputTuple = [
    tierId: BigNumberish,
    totalRebate: BigNumberish,
    discountShare: BigNumberish
  ];
  export type OutputTuple = [
    tierId: bigint,
    totalRebate: bigint,
    discountShare: bigint
  ];
  export interface OutputObject {
    tierId: bigint;
    totalRebate: bigint;
    discountShare: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SetTraderReferralCodeEvent {
  export type InputTuple = [account: AddressLike, code: BytesLike];
  export type OutputTuple = [account: string, code: string];
  export interface OutputObject {
    account: string;
    code: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface ReferralStorage extends BaseContract {
  connect(runner?: ContractRunner | null): ReferralStorage;
  waitForDeployment(): Promise<this>;

  interface: ReferralStorageInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  BASIS_POINTS: TypedContractMethod<[], [bigint], "view">;

  codeOwners: TypedContractMethod<[arg0: BytesLike], [string], "view">;

  getTraderReferralInfo: TypedContractMethod<
    [_account: AddressLike],
    [[string, string]],
    "view"
  >;

  gov: TypedContractMethod<[], [string], "view">;

  govSetCodeOwner: TypedContractMethod<
    [_code: BytesLike, _newAccount: AddressLike],
    [void],
    "nonpayable"
  >;

  isHandler: TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

  referrerDiscountShares: TypedContractMethod<
    [arg0: AddressLike],
    [bigint],
    "view"
  >;

  referrerTiers: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  registerCode: TypedContractMethod<[_code: BytesLike], [void], "nonpayable">;

  setCodeOwner: TypedContractMethod<
    [_code: BytesLike, _newAccount: AddressLike],
    [void],
    "nonpayable"
  >;

  setGov: TypedContractMethod<[_gov: AddressLike], [void], "nonpayable">;

  setHandler: TypedContractMethod<
    [_handler: AddressLike, _isActive: boolean],
    [void],
    "nonpayable"
  >;

  setReferrerDiscountShare: TypedContractMethod<
    [_discountShare: BigNumberish],
    [void],
    "nonpayable"
  >;

  setReferrerTier: TypedContractMethod<
    [_referrer: AddressLike, _tierId: BigNumberish],
    [void],
    "nonpayable"
  >;

  setTier: TypedContractMethod<
    [
      _tierId: BigNumberish,
      _totalRebate: BigNumberish,
      _discountShare: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  setTraderReferralCode: TypedContractMethod<
    [_account: AddressLike, _code: BytesLike],
    [void],
    "nonpayable"
  >;

  setTraderReferralCodeByUser: TypedContractMethod<
    [_code: BytesLike],
    [void],
    "nonpayable"
  >;

  tiers: TypedContractMethod<
    [arg0: BigNumberish],
    [[bigint, bigint] & { totalRebate: bigint; discountShare: bigint }],
    "view"
  >;

  traderReferralCodes: TypedContractMethod<
    [arg0: AddressLike],
    [string],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "BASIS_POINTS"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "codeOwners"
  ): TypedContractMethod<[arg0: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "getTraderReferralInfo"
  ): TypedContractMethod<[_account: AddressLike], [[string, string]], "view">;
  getFunction(
    nameOrSignature: "gov"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "govSetCodeOwner"
  ): TypedContractMethod<
    [_code: BytesLike, _newAccount: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "isHandler"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "referrerDiscountShares"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "referrerTiers"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "registerCode"
  ): TypedContractMethod<[_code: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setCodeOwner"
  ): TypedContractMethod<
    [_code: BytesLike, _newAccount: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setGov"
  ): TypedContractMethod<[_gov: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setHandler"
  ): TypedContractMethod<
    [_handler: AddressLike, _isActive: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setReferrerDiscountShare"
  ): TypedContractMethod<[_discountShare: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setReferrerTier"
  ): TypedContractMethod<
    [_referrer: AddressLike, _tierId: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setTier"
  ): TypedContractMethod<
    [
      _tierId: BigNumberish,
      _totalRebate: BigNumberish,
      _discountShare: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setTraderReferralCode"
  ): TypedContractMethod<
    [_account: AddressLike, _code: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setTraderReferralCodeByUser"
  ): TypedContractMethod<[_code: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "tiers"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [[bigint, bigint] & { totalRebate: bigint; discountShare: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "traderReferralCodes"
  ): TypedContractMethod<[arg0: AddressLike], [string], "view">;

  getEvent(
    key: "GovSetCodeOwner"
  ): TypedContractEvent<
    GovSetCodeOwnerEvent.InputTuple,
    GovSetCodeOwnerEvent.OutputTuple,
    GovSetCodeOwnerEvent.OutputObject
  >;
  getEvent(
    key: "RegisterCode"
  ): TypedContractEvent<
    RegisterCodeEvent.InputTuple,
    RegisterCodeEvent.OutputTuple,
    RegisterCodeEvent.OutputObject
  >;
  getEvent(
    key: "SetCodeOwner"
  ): TypedContractEvent<
    SetCodeOwnerEvent.InputTuple,
    SetCodeOwnerEvent.OutputTuple,
    SetCodeOwnerEvent.OutputObject
  >;
  getEvent(
    key: "SetHandler"
  ): TypedContractEvent<
    SetHandlerEvent.InputTuple,
    SetHandlerEvent.OutputTuple,
    SetHandlerEvent.OutputObject
  >;
  getEvent(
    key: "SetReferrerDiscountShare"
  ): TypedContractEvent<
    SetReferrerDiscountShareEvent.InputTuple,
    SetReferrerDiscountShareEvent.OutputTuple,
    SetReferrerDiscountShareEvent.OutputObject
  >;
  getEvent(
    key: "SetReferrerTier"
  ): TypedContractEvent<
    SetReferrerTierEvent.InputTuple,
    SetReferrerTierEvent.OutputTuple,
    SetReferrerTierEvent.OutputObject
  >;
  getEvent(
    key: "SetTier"
  ): TypedContractEvent<
    SetTierEvent.InputTuple,
    SetTierEvent.OutputTuple,
    SetTierEvent.OutputObject
  >;
  getEvent(
    key: "SetTraderReferralCode"
  ): TypedContractEvent<
    SetTraderReferralCodeEvent.InputTuple,
    SetTraderReferralCodeEvent.OutputTuple,
    SetTraderReferralCodeEvent.OutputObject
  >;

  filters: {
    "GovSetCodeOwner(bytes32,address)": TypedContractEvent<
      GovSetCodeOwnerEvent.InputTuple,
      GovSetCodeOwnerEvent.OutputTuple,
      GovSetCodeOwnerEvent.OutputObject
    >;
    GovSetCodeOwner: TypedContractEvent<
      GovSetCodeOwnerEvent.InputTuple,
      GovSetCodeOwnerEvent.OutputTuple,
      GovSetCodeOwnerEvent.OutputObject
    >;

    "RegisterCode(address,bytes32)": TypedContractEvent<
      RegisterCodeEvent.InputTuple,
      RegisterCodeEvent.OutputTuple,
      RegisterCodeEvent.OutputObject
    >;
    RegisterCode: TypedContractEvent<
      RegisterCodeEvent.InputTuple,
      RegisterCodeEvent.OutputTuple,
      RegisterCodeEvent.OutputObject
    >;

    "SetCodeOwner(address,address,bytes32)": TypedContractEvent<
      SetCodeOwnerEvent.InputTuple,
      SetCodeOwnerEvent.OutputTuple,
      SetCodeOwnerEvent.OutputObject
    >;
    SetCodeOwner: TypedContractEvent<
      SetCodeOwnerEvent.InputTuple,
      SetCodeOwnerEvent.OutputTuple,
      SetCodeOwnerEvent.OutputObject
    >;

    "SetHandler(address,bool)": TypedContractEvent<
      SetHandlerEvent.InputTuple,
      SetHandlerEvent.OutputTuple,
      SetHandlerEvent.OutputObject
    >;
    SetHandler: TypedContractEvent<
      SetHandlerEvent.InputTuple,
      SetHandlerEvent.OutputTuple,
      SetHandlerEvent.OutputObject
    >;

    "SetReferrerDiscountShare(address,uint256)": TypedContractEvent<
      SetReferrerDiscountShareEvent.InputTuple,
      SetReferrerDiscountShareEvent.OutputTuple,
      SetReferrerDiscountShareEvent.OutputObject
    >;
    SetReferrerDiscountShare: TypedContractEvent<
      SetReferrerDiscountShareEvent.InputTuple,
      SetReferrerDiscountShareEvent.OutputTuple,
      SetReferrerDiscountShareEvent.OutputObject
    >;

    "SetReferrerTier(address,uint256)": TypedContractEvent<
      SetReferrerTierEvent.InputTuple,
      SetReferrerTierEvent.OutputTuple,
      SetReferrerTierEvent.OutputObject
    >;
    SetReferrerTier: TypedContractEvent<
      SetReferrerTierEvent.InputTuple,
      SetReferrerTierEvent.OutputTuple,
      SetReferrerTierEvent.OutputObject
    >;

    "SetTier(uint256,uint256,uint256)": TypedContractEvent<
      SetTierEvent.InputTuple,
      SetTierEvent.OutputTuple,
      SetTierEvent.OutputObject
    >;
    SetTier: TypedContractEvent<
      SetTierEvent.InputTuple,
      SetTierEvent.OutputTuple,
      SetTierEvent.OutputObject
    >;

    "SetTraderReferralCode(address,bytes32)": TypedContractEvent<
      SetTraderReferralCodeEvent.InputTuple,
      SetTraderReferralCodeEvent.OutputTuple,
      SetTraderReferralCodeEvent.OutputObject
    >;
    SetTraderReferralCode: TypedContractEvent<
      SetTraderReferralCodeEvent.InputTuple,
      SetTraderReferralCodeEvent.OutputTuple,
      SetTraderReferralCodeEvent.OutputObject
    >;
  };
}
