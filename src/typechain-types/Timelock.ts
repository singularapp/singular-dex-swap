/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface TimelockInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "MAX_BUFFER"
      | "MAX_FUNDING_RATE_FACTOR"
      | "MAX_LEVERAGE_VALIDATION"
      | "PRICE_PRECISION"
      | "admin"
      | "approve"
      | "batchSetBonusRewards"
      | "batchWithdrawFees"
      | "buffer"
      | "cancelAction"
      | "disableLeverage"
      | "enableLeverage"
      | "glpManager"
      | "govSetCodeOwner"
      | "initGlpManager"
      | "initRewardRouter"
      | "isHandler"
      | "isKeeper"
      | "marginFeeBasisPoints"
      | "maxMarginFeeBasisPoints"
      | "maxTokenSupply"
      | "mintReceiver"
      | "pendingActions"
      | "processMint"
      | "redeemUsdg"
      | "removeAdmin"
      | "rewardRouter"
      | "setAdmin"
      | "setBuffer"
      | "setContractHandler"
      | "setExternalAdmin"
      | "setFees"
      | "setFundingRate"
      | "setGlpCooldownDuration"
      | "setGov"
      | "setHandler"
      | "setInPrivateLiquidationMode"
      | "setInPrivateTransferMode"
      | "setIsLeverageEnabled"
      | "setIsSwapEnabled"
      | "setKeeper"
      | "setLiquidator"
      | "setMarginFeeBasisPoints"
      | "setMaxGasPrice"
      | "setMaxGlobalShortSize"
      | "setMaxLeverage"
      | "setPriceFeed"
      | "setReferrerTier"
      | "setShortsTrackerAveragePriceWeight"
      | "setShouldToggleIsLeverageEnabled"
      | "setSwapFees"
      | "setTier"
      | "setTokenConfig"
      | "setUsdgAmounts"
      | "setVaultUtils"
      | "shouldToggleIsLeverageEnabled"
      | "signalApprove"
      | "signalMint"
      | "signalRedeemUsdg"
      | "signalSetGov"
      | "signalSetHandler"
      | "signalSetPriceFeed"
      | "signalVaultSetTokenConfig"
      | "signalWithdrawToken"
      | "tokenManager"
      | "transferIn"
      | "updateUsdgSupply"
      | "vaultSetTokenConfig"
      | "withdrawFees"
      | "withdrawToken"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "ClearAction"
      | "SignalApprove"
      | "SignalMint"
      | "SignalPendingAction"
      | "SignalRedeemUsdg"
      | "SignalSetGov"
      | "SignalSetHandler"
      | "SignalSetPriceFeed"
      | "SignalVaultSetTokenConfig"
      | "SignalWithdrawToken"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "MAX_BUFFER",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAX_FUNDING_RATE_FACTOR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAX_LEVERAGE_VALIDATION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PRICE_PRECISION",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "admin", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "batchSetBonusRewards",
    values: [AddressLike, AddressLike[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "batchWithdrawFees",
    values: [AddressLike, AddressLike[]]
  ): string;
  encodeFunctionData(functionFragment: "buffer", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "cancelAction",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "disableLeverage",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "enableLeverage",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "glpManager",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "govSetCodeOwner",
    values: [AddressLike, BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "initGlpManager",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initRewardRouter",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isHandler",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isKeeper",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "marginFeeBasisPoints",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "maxMarginFeeBasisPoints",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "maxTokenSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "mintReceiver",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "pendingActions",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "processMint",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "redeemUsdg",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "removeAdmin",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "rewardRouter",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setAdmin",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setBuffer",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setContractHandler",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setExternalAdmin",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setFees",
    values: [
      AddressLike,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      boolean
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setFundingRate",
    values: [AddressLike, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setGlpCooldownDuration",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setGov",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setHandler",
    values: [AddressLike, AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setInPrivateLiquidationMode",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setInPrivateTransferMode",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setIsLeverageEnabled",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setIsSwapEnabled",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setKeeper",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setLiquidator",
    values: [AddressLike, AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setMarginFeeBasisPoints",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxGasPrice",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxGlobalShortSize",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxLeverage",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setPriceFeed",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setReferrerTier",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setShortsTrackerAveragePriceWeight",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setShouldToggleIsLeverageEnabled",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setSwapFees",
    values: [
      AddressLike,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setTier",
    values: [AddressLike, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setTokenConfig",
    values: [
      AddressLike,
      AddressLike,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setUsdgAmounts",
    values: [AddressLike, AddressLike[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setVaultUtils",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "shouldToggleIsLeverageEnabled",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "signalApprove",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "signalMint",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "signalRedeemUsdg",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "signalSetGov",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "signalSetHandler",
    values: [AddressLike, AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "signalSetPriceFeed",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "signalVaultSetTokenConfig",
    values: [
      AddressLike,
      AddressLike,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      boolean,
      boolean
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "signalWithdrawToken",
    values: [AddressLike, AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenManager",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferIn",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateUsdgSupply",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "vaultSetTokenConfig",
    values: [
      AddressLike,
      AddressLike,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      boolean,
      boolean
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawFees",
    values: [AddressLike, AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawToken",
    values: [AddressLike, AddressLike, AddressLike, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "MAX_BUFFER", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "MAX_FUNDING_RATE_FACTOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MAX_LEVERAGE_VALIDATION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PRICE_PRECISION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "admin", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "batchSetBonusRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "batchWithdrawFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "buffer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "cancelAction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "disableLeverage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "enableLeverage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "glpManager", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "govSetCodeOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "initGlpManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "initRewardRouter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isHandler", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isKeeper", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "marginFeeBasisPoints",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxMarginFeeBasisPoints",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxTokenSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mintReceiver",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pendingActions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "processMint",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "redeemUsdg", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardRouter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setAdmin", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setBuffer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setContractHandler",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setExternalAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setFees", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setFundingRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setGlpCooldownDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setGov", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setHandler", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setInPrivateLiquidationMode",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setInPrivateTransferMode",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setIsLeverageEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setIsSwapEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setKeeper", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setLiquidator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMarginFeeBasisPoints",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaxGasPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaxGlobalShortSize",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaxLeverage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPriceFeed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setReferrerTier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setShortsTrackerAveragePriceWeight",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setShouldToggleIsLeverageEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSwapFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setTier", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setTokenConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setUsdgAmounts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setVaultUtils",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "shouldToggleIsLeverageEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "signalApprove",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "signalMint", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "signalRedeemUsdg",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "signalSetGov",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "signalSetHandler",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "signalSetPriceFeed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "signalVaultSetTokenConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "signalWithdrawToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transferIn", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateUsdgSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "vaultSetTokenConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawToken",
    data: BytesLike
  ): Result;
}

export namespace ClearActionEvent {
  export type InputTuple = [action: BytesLike];
  export type OutputTuple = [action: string];
  export interface OutputObject {
    action: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SignalApproveEvent {
  export type InputTuple = [
    token: AddressLike,
    spender: AddressLike,
    amount: BigNumberish,
    action: BytesLike
  ];
  export type OutputTuple = [
    token: string,
    spender: string,
    amount: bigint,
    action: string
  ];
  export interface OutputObject {
    token: string;
    spender: string;
    amount: bigint;
    action: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SignalMintEvent {
  export type InputTuple = [
    token: AddressLike,
    receiver: AddressLike,
    amount: BigNumberish,
    action: BytesLike
  ];
  export type OutputTuple = [
    token: string,
    receiver: string,
    amount: bigint,
    action: string
  ];
  export interface OutputObject {
    token: string;
    receiver: string;
    amount: bigint;
    action: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SignalPendingActionEvent {
  export type InputTuple = [action: BytesLike];
  export type OutputTuple = [action: string];
  export interface OutputObject {
    action: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SignalRedeemUsdgEvent {
  export type InputTuple = [
    vault: AddressLike,
    token: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [vault: string, token: string, amount: bigint];
  export interface OutputObject {
    vault: string;
    token: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SignalSetGovEvent {
  export type InputTuple = [
    target: AddressLike,
    gov: AddressLike,
    action: BytesLike
  ];
  export type OutputTuple = [target: string, gov: string, action: string];
  export interface OutputObject {
    target: string;
    gov: string;
    action: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SignalSetHandlerEvent {
  export type InputTuple = [
    target: AddressLike,
    handler: AddressLike,
    isActive: boolean,
    action: BytesLike
  ];
  export type OutputTuple = [
    target: string,
    handler: string,
    isActive: boolean,
    action: string
  ];
  export interface OutputObject {
    target: string;
    handler: string;
    isActive: boolean;
    action: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SignalSetPriceFeedEvent {
  export type InputTuple = [
    vault: AddressLike,
    priceFeed: AddressLike,
    action: BytesLike
  ];
  export type OutputTuple = [vault: string, priceFeed: string, action: string];
  export interface OutputObject {
    vault: string;
    priceFeed: string;
    action: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SignalVaultSetTokenConfigEvent {
  export type InputTuple = [
    vault: AddressLike,
    token: AddressLike,
    tokenDecimals: BigNumberish,
    tokenWeight: BigNumberish,
    minProfitBps: BigNumberish,
    maxUsdgAmount: BigNumberish,
    isStable: boolean,
    isShortable: boolean
  ];
  export type OutputTuple = [
    vault: string,
    token: string,
    tokenDecimals: bigint,
    tokenWeight: bigint,
    minProfitBps: bigint,
    maxUsdgAmount: bigint,
    isStable: boolean,
    isShortable: boolean
  ];
  export interface OutputObject {
    vault: string;
    token: string;
    tokenDecimals: bigint;
    tokenWeight: bigint;
    minProfitBps: bigint;
    maxUsdgAmount: bigint;
    isStable: boolean;
    isShortable: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SignalWithdrawTokenEvent {
  export type InputTuple = [
    target: AddressLike,
    token: AddressLike,
    receiver: AddressLike,
    amount: BigNumberish,
    action: BytesLike
  ];
  export type OutputTuple = [
    target: string,
    token: string,
    receiver: string,
    amount: bigint,
    action: string
  ];
  export interface OutputObject {
    target: string;
    token: string;
    receiver: string;
    amount: bigint;
    action: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface Timelock extends BaseContract {
  connect(runner?: ContractRunner | null): Timelock;
  waitForDeployment(): Promise<this>;

  interface: TimelockInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  MAX_BUFFER: TypedContractMethod<[], [bigint], "view">;

  MAX_FUNDING_RATE_FACTOR: TypedContractMethod<[], [bigint], "view">;

  MAX_LEVERAGE_VALIDATION: TypedContractMethod<[], [bigint], "view">;

  PRICE_PRECISION: TypedContractMethod<[], [bigint], "view">;

  admin: TypedContractMethod<[], [string], "view">;

  approve: TypedContractMethod<
    [_token: AddressLike, _spender: AddressLike, _amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  batchSetBonusRewards: TypedContractMethod<
    [_vester: AddressLike, _accounts: AddressLike[], _amounts: BigNumberish[]],
    [void],
    "nonpayable"
  >;

  batchWithdrawFees: TypedContractMethod<
    [_vault: AddressLike, _tokens: AddressLike[]],
    [void],
    "nonpayable"
  >;

  buffer: TypedContractMethod<[], [bigint], "view">;

  cancelAction: TypedContractMethod<[_action: BytesLike], [void], "nonpayable">;

  disableLeverage: TypedContractMethod<
    [_vault: AddressLike],
    [void],
    "nonpayable"
  >;

  enableLeverage: TypedContractMethod<
    [_vault: AddressLike],
    [void],
    "nonpayable"
  >;

  glpManager: TypedContractMethod<[], [string], "view">;

  govSetCodeOwner: TypedContractMethod<
    [_referralStorage: AddressLike, _code: BytesLike, _newAccount: AddressLike],
    [void],
    "nonpayable"
  >;

  initGlpManager: TypedContractMethod<[], [void], "nonpayable">;

  initRewardRouter: TypedContractMethod<[], [void], "nonpayable">;

  isHandler: TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

  isKeeper: TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

  marginFeeBasisPoints: TypedContractMethod<[], [bigint], "view">;

  maxMarginFeeBasisPoints: TypedContractMethod<[], [bigint], "view">;

  maxTokenSupply: TypedContractMethod<[], [bigint], "view">;

  mintReceiver: TypedContractMethod<[], [string], "view">;

  pendingActions: TypedContractMethod<[arg0: BytesLike], [bigint], "view">;

  processMint: TypedContractMethod<
    [_token: AddressLike, _receiver: AddressLike, _amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  redeemUsdg: TypedContractMethod<
    [_vault: AddressLike, _token: AddressLike, _amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  removeAdmin: TypedContractMethod<
    [_token: AddressLike, _account: AddressLike],
    [void],
    "nonpayable"
  >;

  rewardRouter: TypedContractMethod<[], [string], "view">;

  setAdmin: TypedContractMethod<[_admin: AddressLike], [void], "nonpayable">;

  setBuffer: TypedContractMethod<[_buffer: BigNumberish], [void], "nonpayable">;

  setContractHandler: TypedContractMethod<
    [_handler: AddressLike, _isActive: boolean],
    [void],
    "nonpayable"
  >;

  setExternalAdmin: TypedContractMethod<
    [_target: AddressLike, _admin: AddressLike],
    [void],
    "nonpayable"
  >;

  setFees: TypedContractMethod<
    [
      _vault: AddressLike,
      _taxBasisPoints: BigNumberish,
      _stableTaxBasisPoints: BigNumberish,
      _mintBurnFeeBasisPoints: BigNumberish,
      _swapFeeBasisPoints: BigNumberish,
      _stableSwapFeeBasisPoints: BigNumberish,
      _marginFeeBasisPoints: BigNumberish,
      _liquidationFeeUsd: BigNumberish,
      _minProfitTime: BigNumberish,
      _hasDynamicFees: boolean
    ],
    [void],
    "nonpayable"
  >;

  setFundingRate: TypedContractMethod<
    [
      _vault: AddressLike,
      _fundingInterval: BigNumberish,
      _fundingRateFactor: BigNumberish,
      _stableFundingRateFactor: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  setGlpCooldownDuration: TypedContractMethod<
    [_cooldownDuration: BigNumberish],
    [void],
    "nonpayable"
  >;

  setGov: TypedContractMethod<
    [_target: AddressLike, _gov: AddressLike],
    [void],
    "nonpayable"
  >;

  setHandler: TypedContractMethod<
    [_target: AddressLike, _handler: AddressLike, _isActive: boolean],
    [void],
    "nonpayable"
  >;

  setInPrivateLiquidationMode: TypedContractMethod<
    [_vault: AddressLike, _inPrivateLiquidationMode: boolean],
    [void],
    "nonpayable"
  >;

  setInPrivateTransferMode: TypedContractMethod<
    [_token: AddressLike, _inPrivateTransferMode: boolean],
    [void],
    "nonpayable"
  >;

  setIsLeverageEnabled: TypedContractMethod<
    [_vault: AddressLike, _isLeverageEnabled: boolean],
    [void],
    "nonpayable"
  >;

  setIsSwapEnabled: TypedContractMethod<
    [_vault: AddressLike, _isSwapEnabled: boolean],
    [void],
    "nonpayable"
  >;

  setKeeper: TypedContractMethod<
    [_keeper: AddressLike, _isActive: boolean],
    [void],
    "nonpayable"
  >;

  setLiquidator: TypedContractMethod<
    [_vault: AddressLike, _liquidator: AddressLike, _isActive: boolean],
    [void],
    "nonpayable"
  >;

  setMarginFeeBasisPoints: TypedContractMethod<
    [
      _marginFeeBasisPoints: BigNumberish,
      _maxMarginFeeBasisPoints: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  setMaxGasPrice: TypedContractMethod<
    [_vault: AddressLike, _maxGasPrice: BigNumberish],
    [void],
    "nonpayable"
  >;

  setMaxGlobalShortSize: TypedContractMethod<
    [_vault: AddressLike, _token: AddressLike, _amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  setMaxLeverage: TypedContractMethod<
    [_vault: AddressLike, _maxLeverage: BigNumberish],
    [void],
    "nonpayable"
  >;

  setPriceFeed: TypedContractMethod<
    [_vault: AddressLike, _priceFeed: AddressLike],
    [void],
    "nonpayable"
  >;

  setReferrerTier: TypedContractMethod<
    [
      _referralStorage: AddressLike,
      _referrer: AddressLike,
      _tierId: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  setShortsTrackerAveragePriceWeight: TypedContractMethod<
    [_shortsTrackerAveragePriceWeight: BigNumberish],
    [void],
    "nonpayable"
  >;

  setShouldToggleIsLeverageEnabled: TypedContractMethod<
    [_shouldToggleIsLeverageEnabled: boolean],
    [void],
    "nonpayable"
  >;

  setSwapFees: TypedContractMethod<
    [
      _vault: AddressLike,
      _taxBasisPoints: BigNumberish,
      _stableTaxBasisPoints: BigNumberish,
      _mintBurnFeeBasisPoints: BigNumberish,
      _swapFeeBasisPoints: BigNumberish,
      _stableSwapFeeBasisPoints: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  setTier: TypedContractMethod<
    [
      _referralStorage: AddressLike,
      _tierId: BigNumberish,
      _totalRebate: BigNumberish,
      _discountShare: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  setTokenConfig: TypedContractMethod<
    [
      _vault: AddressLike,
      _token: AddressLike,
      _tokenWeight: BigNumberish,
      _minProfitBps: BigNumberish,
      _maxUsdgAmount: BigNumberish,
      _bufferAmount: BigNumberish,
      _usdgAmount: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  setUsdgAmounts: TypedContractMethod<
    [_vault: AddressLike, _tokens: AddressLike[], _usdgAmounts: BigNumberish[]],
    [void],
    "nonpayable"
  >;

  setVaultUtils: TypedContractMethod<
    [_vault: AddressLike, _vaultUtils: AddressLike],
    [void],
    "nonpayable"
  >;

  shouldToggleIsLeverageEnabled: TypedContractMethod<[], [boolean], "view">;

  signalApprove: TypedContractMethod<
    [_token: AddressLike, _spender: AddressLike, _amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  signalMint: TypedContractMethod<
    [_token: AddressLike, _receiver: AddressLike, _amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  signalRedeemUsdg: TypedContractMethod<
    [_vault: AddressLike, _token: AddressLike, _amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  signalSetGov: TypedContractMethod<
    [_target: AddressLike, _gov: AddressLike],
    [void],
    "nonpayable"
  >;

  signalSetHandler: TypedContractMethod<
    [_target: AddressLike, _handler: AddressLike, _isActive: boolean],
    [void],
    "nonpayable"
  >;

  signalSetPriceFeed: TypedContractMethod<
    [_vault: AddressLike, _priceFeed: AddressLike],
    [void],
    "nonpayable"
  >;

  signalVaultSetTokenConfig: TypedContractMethod<
    [
      _vault: AddressLike,
      _token: AddressLike,
      _tokenDecimals: BigNumberish,
      _tokenWeight: BigNumberish,
      _minProfitBps: BigNumberish,
      _maxUsdgAmount: BigNumberish,
      _isStable: boolean,
      _isShortable: boolean
    ],
    [void],
    "nonpayable"
  >;

  signalWithdrawToken: TypedContractMethod<
    [
      _target: AddressLike,
      _token: AddressLike,
      _receiver: AddressLike,
      _amount: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  tokenManager: TypedContractMethod<[], [string], "view">;

  transferIn: TypedContractMethod<
    [_sender: AddressLike, _token: AddressLike, _amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  updateUsdgSupply: TypedContractMethod<
    [usdgAmount: BigNumberish],
    [void],
    "nonpayable"
  >;

  vaultSetTokenConfig: TypedContractMethod<
    [
      _vault: AddressLike,
      _token: AddressLike,
      _tokenDecimals: BigNumberish,
      _tokenWeight: BigNumberish,
      _minProfitBps: BigNumberish,
      _maxUsdgAmount: BigNumberish,
      _isStable: boolean,
      _isShortable: boolean
    ],
    [void],
    "nonpayable"
  >;

  withdrawFees: TypedContractMethod<
    [_vault: AddressLike, _token: AddressLike, _receiver: AddressLike],
    [void],
    "nonpayable"
  >;

  withdrawToken: TypedContractMethod<
    [
      _target: AddressLike,
      _token: AddressLike,
      _receiver: AddressLike,
      _amount: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "MAX_BUFFER"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "MAX_FUNDING_RATE_FACTOR"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "MAX_LEVERAGE_VALIDATION"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "PRICE_PRECISION"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "admin"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "approve"
  ): TypedContractMethod<
    [_token: AddressLike, _spender: AddressLike, _amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "batchSetBonusRewards"
  ): TypedContractMethod<
    [_vester: AddressLike, _accounts: AddressLike[], _amounts: BigNumberish[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "batchWithdrawFees"
  ): TypedContractMethod<
    [_vault: AddressLike, _tokens: AddressLike[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "buffer"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "cancelAction"
  ): TypedContractMethod<[_action: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "disableLeverage"
  ): TypedContractMethod<[_vault: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "enableLeverage"
  ): TypedContractMethod<[_vault: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "glpManager"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "govSetCodeOwner"
  ): TypedContractMethod<
    [_referralStorage: AddressLike, _code: BytesLike, _newAccount: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "initGlpManager"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "initRewardRouter"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "isHandler"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "isKeeper"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "marginFeeBasisPoints"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "maxMarginFeeBasisPoints"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "maxTokenSupply"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "mintReceiver"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "pendingActions"
  ): TypedContractMethod<[arg0: BytesLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "processMint"
  ): TypedContractMethod<
    [_token: AddressLike, _receiver: AddressLike, _amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "redeemUsdg"
  ): TypedContractMethod<
    [_vault: AddressLike, _token: AddressLike, _amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "removeAdmin"
  ): TypedContractMethod<
    [_token: AddressLike, _account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "rewardRouter"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "setAdmin"
  ): TypedContractMethod<[_admin: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setBuffer"
  ): TypedContractMethod<[_buffer: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setContractHandler"
  ): TypedContractMethod<
    [_handler: AddressLike, _isActive: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setExternalAdmin"
  ): TypedContractMethod<
    [_target: AddressLike, _admin: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setFees"
  ): TypedContractMethod<
    [
      _vault: AddressLike,
      _taxBasisPoints: BigNumberish,
      _stableTaxBasisPoints: BigNumberish,
      _mintBurnFeeBasisPoints: BigNumberish,
      _swapFeeBasisPoints: BigNumberish,
      _stableSwapFeeBasisPoints: BigNumberish,
      _marginFeeBasisPoints: BigNumberish,
      _liquidationFeeUsd: BigNumberish,
      _minProfitTime: BigNumberish,
      _hasDynamicFees: boolean
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setFundingRate"
  ): TypedContractMethod<
    [
      _vault: AddressLike,
      _fundingInterval: BigNumberish,
      _fundingRateFactor: BigNumberish,
      _stableFundingRateFactor: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setGlpCooldownDuration"
  ): TypedContractMethod<
    [_cooldownDuration: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setGov"
  ): TypedContractMethod<
    [_target: AddressLike, _gov: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setHandler"
  ): TypedContractMethod<
    [_target: AddressLike, _handler: AddressLike, _isActive: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setInPrivateLiquidationMode"
  ): TypedContractMethod<
    [_vault: AddressLike, _inPrivateLiquidationMode: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setInPrivateTransferMode"
  ): TypedContractMethod<
    [_token: AddressLike, _inPrivateTransferMode: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setIsLeverageEnabled"
  ): TypedContractMethod<
    [_vault: AddressLike, _isLeverageEnabled: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setIsSwapEnabled"
  ): TypedContractMethod<
    [_vault: AddressLike, _isSwapEnabled: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setKeeper"
  ): TypedContractMethod<
    [_keeper: AddressLike, _isActive: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setLiquidator"
  ): TypedContractMethod<
    [_vault: AddressLike, _liquidator: AddressLike, _isActive: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setMarginFeeBasisPoints"
  ): TypedContractMethod<
    [
      _marginFeeBasisPoints: BigNumberish,
      _maxMarginFeeBasisPoints: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setMaxGasPrice"
  ): TypedContractMethod<
    [_vault: AddressLike, _maxGasPrice: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setMaxGlobalShortSize"
  ): TypedContractMethod<
    [_vault: AddressLike, _token: AddressLike, _amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setMaxLeverage"
  ): TypedContractMethod<
    [_vault: AddressLike, _maxLeverage: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setPriceFeed"
  ): TypedContractMethod<
    [_vault: AddressLike, _priceFeed: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setReferrerTier"
  ): TypedContractMethod<
    [
      _referralStorage: AddressLike,
      _referrer: AddressLike,
      _tierId: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setShortsTrackerAveragePriceWeight"
  ): TypedContractMethod<
    [_shortsTrackerAveragePriceWeight: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setShouldToggleIsLeverageEnabled"
  ): TypedContractMethod<
    [_shouldToggleIsLeverageEnabled: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setSwapFees"
  ): TypedContractMethod<
    [
      _vault: AddressLike,
      _taxBasisPoints: BigNumberish,
      _stableTaxBasisPoints: BigNumberish,
      _mintBurnFeeBasisPoints: BigNumberish,
      _swapFeeBasisPoints: BigNumberish,
      _stableSwapFeeBasisPoints: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setTier"
  ): TypedContractMethod<
    [
      _referralStorage: AddressLike,
      _tierId: BigNumberish,
      _totalRebate: BigNumberish,
      _discountShare: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setTokenConfig"
  ): TypedContractMethod<
    [
      _vault: AddressLike,
      _token: AddressLike,
      _tokenWeight: BigNumberish,
      _minProfitBps: BigNumberish,
      _maxUsdgAmount: BigNumberish,
      _bufferAmount: BigNumberish,
      _usdgAmount: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setUsdgAmounts"
  ): TypedContractMethod<
    [_vault: AddressLike, _tokens: AddressLike[], _usdgAmounts: BigNumberish[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setVaultUtils"
  ): TypedContractMethod<
    [_vault: AddressLike, _vaultUtils: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "shouldToggleIsLeverageEnabled"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "signalApprove"
  ): TypedContractMethod<
    [_token: AddressLike, _spender: AddressLike, _amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "signalMint"
  ): TypedContractMethod<
    [_token: AddressLike, _receiver: AddressLike, _amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "signalRedeemUsdg"
  ): TypedContractMethod<
    [_vault: AddressLike, _token: AddressLike, _amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "signalSetGov"
  ): TypedContractMethod<
    [_target: AddressLike, _gov: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "signalSetHandler"
  ): TypedContractMethod<
    [_target: AddressLike, _handler: AddressLike, _isActive: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "signalSetPriceFeed"
  ): TypedContractMethod<
    [_vault: AddressLike, _priceFeed: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "signalVaultSetTokenConfig"
  ): TypedContractMethod<
    [
      _vault: AddressLike,
      _token: AddressLike,
      _tokenDecimals: BigNumberish,
      _tokenWeight: BigNumberish,
      _minProfitBps: BigNumberish,
      _maxUsdgAmount: BigNumberish,
      _isStable: boolean,
      _isShortable: boolean
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "signalWithdrawToken"
  ): TypedContractMethod<
    [
      _target: AddressLike,
      _token: AddressLike,
      _receiver: AddressLike,
      _amount: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "tokenManager"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "transferIn"
  ): TypedContractMethod<
    [_sender: AddressLike, _token: AddressLike, _amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updateUsdgSupply"
  ): TypedContractMethod<[usdgAmount: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "vaultSetTokenConfig"
  ): TypedContractMethod<
    [
      _vault: AddressLike,
      _token: AddressLike,
      _tokenDecimals: BigNumberish,
      _tokenWeight: BigNumberish,
      _minProfitBps: BigNumberish,
      _maxUsdgAmount: BigNumberish,
      _isStable: boolean,
      _isShortable: boolean
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "withdrawFees"
  ): TypedContractMethod<
    [_vault: AddressLike, _token: AddressLike, _receiver: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "withdrawToken"
  ): TypedContractMethod<
    [
      _target: AddressLike,
      _token: AddressLike,
      _receiver: AddressLike,
      _amount: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "ClearAction"
  ): TypedContractEvent<
    ClearActionEvent.InputTuple,
    ClearActionEvent.OutputTuple,
    ClearActionEvent.OutputObject
  >;
  getEvent(
    key: "SignalApprove"
  ): TypedContractEvent<
    SignalApproveEvent.InputTuple,
    SignalApproveEvent.OutputTuple,
    SignalApproveEvent.OutputObject
  >;
  getEvent(
    key: "SignalMint"
  ): TypedContractEvent<
    SignalMintEvent.InputTuple,
    SignalMintEvent.OutputTuple,
    SignalMintEvent.OutputObject
  >;
  getEvent(
    key: "SignalPendingAction"
  ): TypedContractEvent<
    SignalPendingActionEvent.InputTuple,
    SignalPendingActionEvent.OutputTuple,
    SignalPendingActionEvent.OutputObject
  >;
  getEvent(
    key: "SignalRedeemUsdg"
  ): TypedContractEvent<
    SignalRedeemUsdgEvent.InputTuple,
    SignalRedeemUsdgEvent.OutputTuple,
    SignalRedeemUsdgEvent.OutputObject
  >;
  getEvent(
    key: "SignalSetGov"
  ): TypedContractEvent<
    SignalSetGovEvent.InputTuple,
    SignalSetGovEvent.OutputTuple,
    SignalSetGovEvent.OutputObject
  >;
  getEvent(
    key: "SignalSetHandler"
  ): TypedContractEvent<
    SignalSetHandlerEvent.InputTuple,
    SignalSetHandlerEvent.OutputTuple,
    SignalSetHandlerEvent.OutputObject
  >;
  getEvent(
    key: "SignalSetPriceFeed"
  ): TypedContractEvent<
    SignalSetPriceFeedEvent.InputTuple,
    SignalSetPriceFeedEvent.OutputTuple,
    SignalSetPriceFeedEvent.OutputObject
  >;
  getEvent(
    key: "SignalVaultSetTokenConfig"
  ): TypedContractEvent<
    SignalVaultSetTokenConfigEvent.InputTuple,
    SignalVaultSetTokenConfigEvent.OutputTuple,
    SignalVaultSetTokenConfigEvent.OutputObject
  >;
  getEvent(
    key: "SignalWithdrawToken"
  ): TypedContractEvent<
    SignalWithdrawTokenEvent.InputTuple,
    SignalWithdrawTokenEvent.OutputTuple,
    SignalWithdrawTokenEvent.OutputObject
  >;

  filters: {
    "ClearAction(bytes32)": TypedContractEvent<
      ClearActionEvent.InputTuple,
      ClearActionEvent.OutputTuple,
      ClearActionEvent.OutputObject
    >;
    ClearAction: TypedContractEvent<
      ClearActionEvent.InputTuple,
      ClearActionEvent.OutputTuple,
      ClearActionEvent.OutputObject
    >;

    "SignalApprove(address,address,uint256,bytes32)": TypedContractEvent<
      SignalApproveEvent.InputTuple,
      SignalApproveEvent.OutputTuple,
      SignalApproveEvent.OutputObject
    >;
    SignalApprove: TypedContractEvent<
      SignalApproveEvent.InputTuple,
      SignalApproveEvent.OutputTuple,
      SignalApproveEvent.OutputObject
    >;

    "SignalMint(address,address,uint256,bytes32)": TypedContractEvent<
      SignalMintEvent.InputTuple,
      SignalMintEvent.OutputTuple,
      SignalMintEvent.OutputObject
    >;
    SignalMint: TypedContractEvent<
      SignalMintEvent.InputTuple,
      SignalMintEvent.OutputTuple,
      SignalMintEvent.OutputObject
    >;

    "SignalPendingAction(bytes32)": TypedContractEvent<
      SignalPendingActionEvent.InputTuple,
      SignalPendingActionEvent.OutputTuple,
      SignalPendingActionEvent.OutputObject
    >;
    SignalPendingAction: TypedContractEvent<
      SignalPendingActionEvent.InputTuple,
      SignalPendingActionEvent.OutputTuple,
      SignalPendingActionEvent.OutputObject
    >;

    "SignalRedeemUsdg(address,address,uint256)": TypedContractEvent<
      SignalRedeemUsdgEvent.InputTuple,
      SignalRedeemUsdgEvent.OutputTuple,
      SignalRedeemUsdgEvent.OutputObject
    >;
    SignalRedeemUsdg: TypedContractEvent<
      SignalRedeemUsdgEvent.InputTuple,
      SignalRedeemUsdgEvent.OutputTuple,
      SignalRedeemUsdgEvent.OutputObject
    >;

    "SignalSetGov(address,address,bytes32)": TypedContractEvent<
      SignalSetGovEvent.InputTuple,
      SignalSetGovEvent.OutputTuple,
      SignalSetGovEvent.OutputObject
    >;
    SignalSetGov: TypedContractEvent<
      SignalSetGovEvent.InputTuple,
      SignalSetGovEvent.OutputTuple,
      SignalSetGovEvent.OutputObject
    >;

    "SignalSetHandler(address,address,bool,bytes32)": TypedContractEvent<
      SignalSetHandlerEvent.InputTuple,
      SignalSetHandlerEvent.OutputTuple,
      SignalSetHandlerEvent.OutputObject
    >;
    SignalSetHandler: TypedContractEvent<
      SignalSetHandlerEvent.InputTuple,
      SignalSetHandlerEvent.OutputTuple,
      SignalSetHandlerEvent.OutputObject
    >;

    "SignalSetPriceFeed(address,address,bytes32)": TypedContractEvent<
      SignalSetPriceFeedEvent.InputTuple,
      SignalSetPriceFeedEvent.OutputTuple,
      SignalSetPriceFeedEvent.OutputObject
    >;
    SignalSetPriceFeed: TypedContractEvent<
      SignalSetPriceFeedEvent.InputTuple,
      SignalSetPriceFeedEvent.OutputTuple,
      SignalSetPriceFeedEvent.OutputObject
    >;

    "SignalVaultSetTokenConfig(address,address,uint256,uint256,uint256,uint256,bool,bool)": TypedContractEvent<
      SignalVaultSetTokenConfigEvent.InputTuple,
      SignalVaultSetTokenConfigEvent.OutputTuple,
      SignalVaultSetTokenConfigEvent.OutputObject
    >;
    SignalVaultSetTokenConfig: TypedContractEvent<
      SignalVaultSetTokenConfigEvent.InputTuple,
      SignalVaultSetTokenConfigEvent.OutputTuple,
      SignalVaultSetTokenConfigEvent.OutputObject
    >;

    "SignalWithdrawToken(address,address,address,uint256,bytes32)": TypedContractEvent<
      SignalWithdrawTokenEvent.InputTuple,
      SignalWithdrawTokenEvent.OutputTuple,
      SignalWithdrawTokenEvent.OutputObject
    >;
    SignalWithdrawToken: TypedContractEvent<
      SignalWithdrawTokenEvent.InputTuple,
      SignalWithdrawTokenEvent.OutputTuple,
      SignalWithdrawTokenEvent.OutputObject
    >;
  };
}
