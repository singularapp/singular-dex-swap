/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface OrderBookInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "PRICE_PRECISION"
      | "USDG_PRECISION"
      | "cancelDecreaseOrder"
      | "cancelIncreaseOrder"
      | "cancelMultiple"
      | "cancelSwapOrder"
      | "createDecreaseOrder"
      | "createIncreaseOrder"
      | "createSwapOrder"
      | "decreaseOrders"
      | "decreaseOrdersIndex"
      | "executeDecreaseOrder"
      | "executeIncreaseOrder"
      | "executeSwapOrder"
      | "getDecreaseOrder"
      | "getIncreaseOrder"
      | "getSwapOrder"
      | "getUsdgMinPrice"
      | "gov"
      | "increaseOrders"
      | "increaseOrdersIndex"
      | "initialize"
      | "isInitialized"
      | "minExecutionFee"
      | "minPurchaseTokenAmountUsd"
      | "router"
      | "setGov"
      | "setMinExecutionFee"
      | "setMinPurchaseTokenAmountUsd"
      | "swapOrders"
      | "swapOrdersIndex"
      | "updateDecreaseOrder"
      | "updateIncreaseOrder"
      | "updateSwapOrder"
      | "usdg"
      | "validatePositionOrderPrice"
      | "validateSwapOrderPriceWithTriggerAboveThreshold"
      | "vault"
      | "weth"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "CancelDecreaseOrder"
      | "CancelIncreaseOrder"
      | "CancelSwapOrder"
      | "CreateDecreaseOrder"
      | "CreateIncreaseOrder"
      | "CreateSwapOrder"
      | "ExecuteDecreaseOrder"
      | "ExecuteIncreaseOrder"
      | "ExecuteSwapOrder"
      | "Initialize"
      | "UpdateDecreaseOrder"
      | "UpdateGov"
      | "UpdateIncreaseOrder"
      | "UpdateMinExecutionFee"
      | "UpdateMinPurchaseTokenAmountUsd"
      | "UpdateSwapOrder"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "PRICE_PRECISION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "USDG_PRECISION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "cancelDecreaseOrder",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelIncreaseOrder",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelMultiple",
    values: [BigNumberish[], BigNumberish[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelSwapOrder",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createDecreaseOrder",
    values: [
      AddressLike,
      BigNumberish,
      AddressLike,
      BigNumberish,
      boolean,
      BigNumberish,
      boolean
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "createIncreaseOrder",
    values: [
      AddressLike[],
      BigNumberish,
      AddressLike,
      BigNumberish,
      BigNumberish,
      AddressLike,
      boolean,
      BigNumberish,
      boolean,
      BigNumberish,
      boolean
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "createSwapOrder",
    values: [
      AddressLike[],
      BigNumberish,
      BigNumberish,
      BigNumberish,
      boolean,
      BigNumberish,
      boolean,
      boolean
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "decreaseOrders",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "decreaseOrdersIndex",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "executeDecreaseOrder",
    values: [AddressLike, BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "executeIncreaseOrder",
    values: [AddressLike, BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "executeSwapOrder",
    values: [AddressLike, BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getDecreaseOrder",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getIncreaseOrder",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getSwapOrder",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getUsdgMinPrice",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "gov", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "increaseOrders",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "increaseOrdersIndex",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [
      AddressLike,
      AddressLike,
      AddressLike,
      AddressLike,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "isInitialized",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "minExecutionFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "minPurchaseTokenAmountUsd",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "router", values?: undefined): string;
  encodeFunctionData(functionFragment: "setGov", values: [AddressLike]): string;
  encodeFunctionData(
    functionFragment: "setMinExecutionFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMinPurchaseTokenAmountUsd",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "swapOrders",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "swapOrdersIndex",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateDecreaseOrder",
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "updateIncreaseOrder",
    values: [BigNumberish, BigNumberish, BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "updateSwapOrder",
    values: [BigNumberish, BigNumberish, BigNumberish, boolean]
  ): string;
  encodeFunctionData(functionFragment: "usdg", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "validatePositionOrderPrice",
    values: [boolean, BigNumberish, AddressLike, boolean, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "validateSwapOrderPriceWithTriggerAboveThreshold",
    values: [AddressLike[], BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "vault", values?: undefined): string;
  encodeFunctionData(functionFragment: "weth", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "PRICE_PRECISION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "USDG_PRECISION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelDecreaseOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelIncreaseOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelMultiple",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelSwapOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createDecreaseOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createIncreaseOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createSwapOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "decreaseOrders",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "decreaseOrdersIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeDecreaseOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeIncreaseOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeSwapOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDecreaseOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getIncreaseOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSwapOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUsdgMinPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "gov", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "increaseOrders",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "increaseOrdersIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isInitialized",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minExecutionFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minPurchaseTokenAmountUsd",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "router", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setGov", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setMinExecutionFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMinPurchaseTokenAmountUsd",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "swapOrders", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "swapOrdersIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateDecreaseOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateIncreaseOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateSwapOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "usdg", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "validatePositionOrderPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "validateSwapOrderPriceWithTriggerAboveThreshold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "vault", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "weth", data: BytesLike): Result;
}

export namespace CancelDecreaseOrderEvent {
  export type InputTuple = [
    account: AddressLike,
    orderIndex: BigNumberish,
    collateralToken: AddressLike,
    collateralDelta: BigNumberish,
    indexToken: AddressLike,
    sizeDelta: BigNumberish,
    isLong: boolean,
    triggerPrice: BigNumberish,
    triggerAboveThreshold: boolean,
    executionFee: BigNumberish
  ];
  export type OutputTuple = [
    account: string,
    orderIndex: bigint,
    collateralToken: string,
    collateralDelta: bigint,
    indexToken: string,
    sizeDelta: bigint,
    isLong: boolean,
    triggerPrice: bigint,
    triggerAboveThreshold: boolean,
    executionFee: bigint
  ];
  export interface OutputObject {
    account: string;
    orderIndex: bigint;
    collateralToken: string;
    collateralDelta: bigint;
    indexToken: string;
    sizeDelta: bigint;
    isLong: boolean;
    triggerPrice: bigint;
    triggerAboveThreshold: boolean;
    executionFee: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CancelIncreaseOrderEvent {
  export type InputTuple = [
    account: AddressLike,
    orderIndex: BigNumberish,
    purchaseToken: AddressLike,
    purchaseTokenAmount: BigNumberish,
    collateralToken: AddressLike,
    indexToken: AddressLike,
    sizeDelta: BigNumberish,
    isLong: boolean,
    triggerPrice: BigNumberish,
    triggerAboveThreshold: boolean,
    executionFee: BigNumberish
  ];
  export type OutputTuple = [
    account: string,
    orderIndex: bigint,
    purchaseToken: string,
    purchaseTokenAmount: bigint,
    collateralToken: string,
    indexToken: string,
    sizeDelta: bigint,
    isLong: boolean,
    triggerPrice: bigint,
    triggerAboveThreshold: boolean,
    executionFee: bigint
  ];
  export interface OutputObject {
    account: string;
    orderIndex: bigint;
    purchaseToken: string;
    purchaseTokenAmount: bigint;
    collateralToken: string;
    indexToken: string;
    sizeDelta: bigint;
    isLong: boolean;
    triggerPrice: bigint;
    triggerAboveThreshold: boolean;
    executionFee: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CancelSwapOrderEvent {
  export type InputTuple = [
    account: AddressLike,
    orderIndex: BigNumberish,
    path: AddressLike[],
    amountIn: BigNumberish,
    minOut: BigNumberish,
    triggerRatio: BigNumberish,
    triggerAboveThreshold: boolean,
    shouldUnwrap: boolean,
    executionFee: BigNumberish
  ];
  export type OutputTuple = [
    account: string,
    orderIndex: bigint,
    path: string[],
    amountIn: bigint,
    minOut: bigint,
    triggerRatio: bigint,
    triggerAboveThreshold: boolean,
    shouldUnwrap: boolean,
    executionFee: bigint
  ];
  export interface OutputObject {
    account: string;
    orderIndex: bigint;
    path: string[];
    amountIn: bigint;
    minOut: bigint;
    triggerRatio: bigint;
    triggerAboveThreshold: boolean;
    shouldUnwrap: boolean;
    executionFee: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CreateDecreaseOrderEvent {
  export type InputTuple = [
    account: AddressLike,
    orderIndex: BigNumberish,
    collateralToken: AddressLike,
    collateralDelta: BigNumberish,
    indexToken: AddressLike,
    sizeDelta: BigNumberish,
    isLong: boolean,
    triggerPrice: BigNumberish,
    triggerAboveThreshold: boolean,
    executionFee: BigNumberish
  ];
  export type OutputTuple = [
    account: string,
    orderIndex: bigint,
    collateralToken: string,
    collateralDelta: bigint,
    indexToken: string,
    sizeDelta: bigint,
    isLong: boolean,
    triggerPrice: bigint,
    triggerAboveThreshold: boolean,
    executionFee: bigint
  ];
  export interface OutputObject {
    account: string;
    orderIndex: bigint;
    collateralToken: string;
    collateralDelta: bigint;
    indexToken: string;
    sizeDelta: bigint;
    isLong: boolean;
    triggerPrice: bigint;
    triggerAboveThreshold: boolean;
    executionFee: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CreateIncreaseOrderEvent {
  export type InputTuple = [
    account: AddressLike,
    orderIndex: BigNumberish,
    purchaseToken: AddressLike,
    purchaseTokenAmount: BigNumberish,
    collateralToken: AddressLike,
    indexToken: AddressLike,
    sizeDelta: BigNumberish,
    isLong: boolean,
    triggerPrice: BigNumberish,
    triggerAboveThreshold: boolean,
    executionFee: BigNumberish
  ];
  export type OutputTuple = [
    account: string,
    orderIndex: bigint,
    purchaseToken: string,
    purchaseTokenAmount: bigint,
    collateralToken: string,
    indexToken: string,
    sizeDelta: bigint,
    isLong: boolean,
    triggerPrice: bigint,
    triggerAboveThreshold: boolean,
    executionFee: bigint
  ];
  export interface OutputObject {
    account: string;
    orderIndex: bigint;
    purchaseToken: string;
    purchaseTokenAmount: bigint;
    collateralToken: string;
    indexToken: string;
    sizeDelta: bigint;
    isLong: boolean;
    triggerPrice: bigint;
    triggerAboveThreshold: boolean;
    executionFee: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CreateSwapOrderEvent {
  export type InputTuple = [
    account: AddressLike,
    orderIndex: BigNumberish,
    path: AddressLike[],
    amountIn: BigNumberish,
    minOut: BigNumberish,
    triggerRatio: BigNumberish,
    triggerAboveThreshold: boolean,
    shouldUnwrap: boolean,
    executionFee: BigNumberish
  ];
  export type OutputTuple = [
    account: string,
    orderIndex: bigint,
    path: string[],
    amountIn: bigint,
    minOut: bigint,
    triggerRatio: bigint,
    triggerAboveThreshold: boolean,
    shouldUnwrap: boolean,
    executionFee: bigint
  ];
  export interface OutputObject {
    account: string;
    orderIndex: bigint;
    path: string[];
    amountIn: bigint;
    minOut: bigint;
    triggerRatio: bigint;
    triggerAboveThreshold: boolean;
    shouldUnwrap: boolean;
    executionFee: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ExecuteDecreaseOrderEvent {
  export type InputTuple = [
    account: AddressLike,
    orderIndex: BigNumberish,
    collateralToken: AddressLike,
    collateralDelta: BigNumberish,
    indexToken: AddressLike,
    sizeDelta: BigNumberish,
    isLong: boolean,
    triggerPrice: BigNumberish,
    triggerAboveThreshold: boolean,
    executionFee: BigNumberish,
    executionPrice: BigNumberish
  ];
  export type OutputTuple = [
    account: string,
    orderIndex: bigint,
    collateralToken: string,
    collateralDelta: bigint,
    indexToken: string,
    sizeDelta: bigint,
    isLong: boolean,
    triggerPrice: bigint,
    triggerAboveThreshold: boolean,
    executionFee: bigint,
    executionPrice: bigint
  ];
  export interface OutputObject {
    account: string;
    orderIndex: bigint;
    collateralToken: string;
    collateralDelta: bigint;
    indexToken: string;
    sizeDelta: bigint;
    isLong: boolean;
    triggerPrice: bigint;
    triggerAboveThreshold: boolean;
    executionFee: bigint;
    executionPrice: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ExecuteIncreaseOrderEvent {
  export type InputTuple = [
    account: AddressLike,
    orderIndex: BigNumberish,
    purchaseToken: AddressLike,
    purchaseTokenAmount: BigNumberish,
    collateralToken: AddressLike,
    indexToken: AddressLike,
    sizeDelta: BigNumberish,
    isLong: boolean,
    triggerPrice: BigNumberish,
    triggerAboveThreshold: boolean,
    executionFee: BigNumberish,
    executionPrice: BigNumberish
  ];
  export type OutputTuple = [
    account: string,
    orderIndex: bigint,
    purchaseToken: string,
    purchaseTokenAmount: bigint,
    collateralToken: string,
    indexToken: string,
    sizeDelta: bigint,
    isLong: boolean,
    triggerPrice: bigint,
    triggerAboveThreshold: boolean,
    executionFee: bigint,
    executionPrice: bigint
  ];
  export interface OutputObject {
    account: string;
    orderIndex: bigint;
    purchaseToken: string;
    purchaseTokenAmount: bigint;
    collateralToken: string;
    indexToken: string;
    sizeDelta: bigint;
    isLong: boolean;
    triggerPrice: bigint;
    triggerAboveThreshold: boolean;
    executionFee: bigint;
    executionPrice: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ExecuteSwapOrderEvent {
  export type InputTuple = [
    account: AddressLike,
    orderIndex: BigNumberish,
    path: AddressLike[],
    amountIn: BigNumberish,
    minOut: BigNumberish,
    amountOut: BigNumberish,
    triggerRatio: BigNumberish,
    triggerAboveThreshold: boolean,
    shouldUnwrap: boolean,
    executionFee: BigNumberish
  ];
  export type OutputTuple = [
    account: string,
    orderIndex: bigint,
    path: string[],
    amountIn: bigint,
    minOut: bigint,
    amountOut: bigint,
    triggerRatio: bigint,
    triggerAboveThreshold: boolean,
    shouldUnwrap: boolean,
    executionFee: bigint
  ];
  export interface OutputObject {
    account: string;
    orderIndex: bigint;
    path: string[];
    amountIn: bigint;
    minOut: bigint;
    amountOut: bigint;
    triggerRatio: bigint;
    triggerAboveThreshold: boolean;
    shouldUnwrap: boolean;
    executionFee: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InitializeEvent {
  export type InputTuple = [
    router: AddressLike,
    vault: AddressLike,
    weth: AddressLike,
    usdg: AddressLike,
    minExecutionFee: BigNumberish,
    minPurchaseTokenAmountUsd: BigNumberish
  ];
  export type OutputTuple = [
    router: string,
    vault: string,
    weth: string,
    usdg: string,
    minExecutionFee: bigint,
    minPurchaseTokenAmountUsd: bigint
  ];
  export interface OutputObject {
    router: string;
    vault: string;
    weth: string;
    usdg: string;
    minExecutionFee: bigint;
    minPurchaseTokenAmountUsd: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UpdateDecreaseOrderEvent {
  export type InputTuple = [
    account: AddressLike,
    orderIndex: BigNumberish,
    collateralToken: AddressLike,
    collateralDelta: BigNumberish,
    indexToken: AddressLike,
    sizeDelta: BigNumberish,
    isLong: boolean,
    triggerPrice: BigNumberish,
    triggerAboveThreshold: boolean
  ];
  export type OutputTuple = [
    account: string,
    orderIndex: bigint,
    collateralToken: string,
    collateralDelta: bigint,
    indexToken: string,
    sizeDelta: bigint,
    isLong: boolean,
    triggerPrice: bigint,
    triggerAboveThreshold: boolean
  ];
  export interface OutputObject {
    account: string;
    orderIndex: bigint;
    collateralToken: string;
    collateralDelta: bigint;
    indexToken: string;
    sizeDelta: bigint;
    isLong: boolean;
    triggerPrice: bigint;
    triggerAboveThreshold: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UpdateGovEvent {
  export type InputTuple = [gov: AddressLike];
  export type OutputTuple = [gov: string];
  export interface OutputObject {
    gov: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UpdateIncreaseOrderEvent {
  export type InputTuple = [
    account: AddressLike,
    orderIndex: BigNumberish,
    collateralToken: AddressLike,
    indexToken: AddressLike,
    isLong: boolean,
    sizeDelta: BigNumberish,
    triggerPrice: BigNumberish,
    triggerAboveThreshold: boolean
  ];
  export type OutputTuple = [
    account: string,
    orderIndex: bigint,
    collateralToken: string,
    indexToken: string,
    isLong: boolean,
    sizeDelta: bigint,
    triggerPrice: bigint,
    triggerAboveThreshold: boolean
  ];
  export interface OutputObject {
    account: string;
    orderIndex: bigint;
    collateralToken: string;
    indexToken: string;
    isLong: boolean;
    sizeDelta: bigint;
    triggerPrice: bigint;
    triggerAboveThreshold: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UpdateMinExecutionFeeEvent {
  export type InputTuple = [minExecutionFee: BigNumberish];
  export type OutputTuple = [minExecutionFee: bigint];
  export interface OutputObject {
    minExecutionFee: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UpdateMinPurchaseTokenAmountUsdEvent {
  export type InputTuple = [minPurchaseTokenAmountUsd: BigNumberish];
  export type OutputTuple = [minPurchaseTokenAmountUsd: bigint];
  export interface OutputObject {
    minPurchaseTokenAmountUsd: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UpdateSwapOrderEvent {
  export type InputTuple = [
    account: AddressLike,
    ordexIndex: BigNumberish,
    path: AddressLike[],
    amountIn: BigNumberish,
    minOut: BigNumberish,
    triggerRatio: BigNumberish,
    triggerAboveThreshold: boolean,
    shouldUnwrap: boolean,
    executionFee: BigNumberish
  ];
  export type OutputTuple = [
    account: string,
    ordexIndex: bigint,
    path: string[],
    amountIn: bigint,
    minOut: bigint,
    triggerRatio: bigint,
    triggerAboveThreshold: boolean,
    shouldUnwrap: boolean,
    executionFee: bigint
  ];
  export interface OutputObject {
    account: string;
    ordexIndex: bigint;
    path: string[];
    amountIn: bigint;
    minOut: bigint;
    triggerRatio: bigint;
    triggerAboveThreshold: boolean;
    shouldUnwrap: boolean;
    executionFee: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface OrderBook extends BaseContract {
  connect(runner?: ContractRunner | null): OrderBook;
  waitForDeployment(): Promise<this>;

  interface: OrderBookInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  PRICE_PRECISION: TypedContractMethod<[], [bigint], "view">;

  USDG_PRECISION: TypedContractMethod<[], [bigint], "view">;

  cancelDecreaseOrder: TypedContractMethod<
    [_orderIndex: BigNumberish],
    [void],
    "nonpayable"
  >;

  cancelIncreaseOrder: TypedContractMethod<
    [_orderIndex: BigNumberish],
    [void],
    "nonpayable"
  >;

  cancelMultiple: TypedContractMethod<
    [
      _swapOrderIndexes: BigNumberish[],
      _increaseOrderIndexes: BigNumberish[],
      _decreaseOrderIndexes: BigNumberish[]
    ],
    [void],
    "nonpayable"
  >;

  cancelSwapOrder: TypedContractMethod<
    [_orderIndex: BigNumberish],
    [void],
    "nonpayable"
  >;

  createDecreaseOrder: TypedContractMethod<
    [
      _indexToken: AddressLike,
      _sizeDelta: BigNumberish,
      _collateralToken: AddressLike,
      _collateralDelta: BigNumberish,
      _isLong: boolean,
      _triggerPrice: BigNumberish,
      _triggerAboveThreshold: boolean
    ],
    [void],
    "payable"
  >;

  createIncreaseOrder: TypedContractMethod<
    [
      _path: AddressLike[],
      _amountIn: BigNumberish,
      _indexToken: AddressLike,
      _minOut: BigNumberish,
      _sizeDelta: BigNumberish,
      _collateralToken: AddressLike,
      _isLong: boolean,
      _triggerPrice: BigNumberish,
      _triggerAboveThreshold: boolean,
      _executionFee: BigNumberish,
      _shouldWrap: boolean
    ],
    [void],
    "payable"
  >;

  createSwapOrder: TypedContractMethod<
    [
      _path: AddressLike[],
      _amountIn: BigNumberish,
      _minOut: BigNumberish,
      _triggerRatio: BigNumberish,
      _triggerAboveThreshold: boolean,
      _executionFee: BigNumberish,
      _shouldWrap: boolean,
      _shouldUnwrap: boolean
    ],
    [void],
    "payable"
  >;

  decreaseOrders: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [
      [
        string,
        string,
        bigint,
        string,
        bigint,
        boolean,
        bigint,
        boolean,
        bigint
      ] & {
        account: string;
        collateralToken: string;
        collateralDelta: bigint;
        indexToken: string;
        sizeDelta: bigint;
        isLong: boolean;
        triggerPrice: bigint;
        triggerAboveThreshold: boolean;
        executionFee: bigint;
      }
    ],
    "view"
  >;

  decreaseOrdersIndex: TypedContractMethod<
    [arg0: AddressLike],
    [bigint],
    "view"
  >;

  executeDecreaseOrder: TypedContractMethod<
    [
      _address: AddressLike,
      _orderIndex: BigNumberish,
      _feeReceiver: AddressLike
    ],
    [void],
    "nonpayable"
  >;

  executeIncreaseOrder: TypedContractMethod<
    [
      _address: AddressLike,
      _orderIndex: BigNumberish,
      _feeReceiver: AddressLike
    ],
    [void],
    "nonpayable"
  >;

  executeSwapOrder: TypedContractMethod<
    [
      _account: AddressLike,
      _orderIndex: BigNumberish,
      _feeReceiver: AddressLike
    ],
    [void],
    "nonpayable"
  >;

  getDecreaseOrder: TypedContractMethod<
    [_account: AddressLike, _orderIndex: BigNumberish],
    [
      [string, bigint, string, bigint, boolean, bigint, boolean, bigint] & {
        collateralToken: string;
        collateralDelta: bigint;
        indexToken: string;
        sizeDelta: bigint;
        isLong: boolean;
        triggerPrice: bigint;
        triggerAboveThreshold: boolean;
        executionFee: bigint;
      }
    ],
    "view"
  >;

  getIncreaseOrder: TypedContractMethod<
    [_account: AddressLike, _orderIndex: BigNumberish],
    [
      [
        string,
        bigint,
        string,
        string,
        bigint,
        boolean,
        bigint,
        boolean,
        bigint
      ] & {
        purchaseToken: string;
        purchaseTokenAmount: bigint;
        collateralToken: string;
        indexToken: string;
        sizeDelta: bigint;
        isLong: boolean;
        triggerPrice: bigint;
        triggerAboveThreshold: boolean;
        executionFee: bigint;
      }
    ],
    "view"
  >;

  getSwapOrder: TypedContractMethod<
    [_account: AddressLike, _orderIndex: BigNumberish],
    [
      [
        string,
        string,
        string,
        bigint,
        bigint,
        bigint,
        boolean,
        boolean,
        bigint
      ] & {
        path0: string;
        path1: string;
        path2: string;
        amountIn: bigint;
        minOut: bigint;
        triggerRatio: bigint;
        triggerAboveThreshold: boolean;
        shouldUnwrap: boolean;
        executionFee: bigint;
      }
    ],
    "view"
  >;

  getUsdgMinPrice: TypedContractMethod<
    [_otherToken: AddressLike],
    [bigint],
    "view"
  >;

  gov: TypedContractMethod<[], [string], "view">;

  increaseOrders: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [
      [
        string,
        string,
        bigint,
        string,
        string,
        bigint,
        boolean,
        bigint,
        boolean,
        bigint
      ] & {
        account: string;
        purchaseToken: string;
        purchaseTokenAmount: bigint;
        collateralToken: string;
        indexToken: string;
        sizeDelta: bigint;
        isLong: boolean;
        triggerPrice: bigint;
        triggerAboveThreshold: boolean;
        executionFee: bigint;
      }
    ],
    "view"
  >;

  increaseOrdersIndex: TypedContractMethod<
    [arg0: AddressLike],
    [bigint],
    "view"
  >;

  initialize: TypedContractMethod<
    [
      _router: AddressLike,
      _vault: AddressLike,
      _weth: AddressLike,
      _usdg: AddressLike,
      _minExecutionFee: BigNumberish,
      _minPurchaseTokenAmountUsd: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  isInitialized: TypedContractMethod<[], [boolean], "view">;

  minExecutionFee: TypedContractMethod<[], [bigint], "view">;

  minPurchaseTokenAmountUsd: TypedContractMethod<[], [bigint], "view">;

  router: TypedContractMethod<[], [string], "view">;

  setGov: TypedContractMethod<[_gov: AddressLike], [void], "nonpayable">;

  setMinExecutionFee: TypedContractMethod<
    [_minExecutionFee: BigNumberish],
    [void],
    "nonpayable"
  >;

  setMinPurchaseTokenAmountUsd: TypedContractMethod<
    [_minPurchaseTokenAmountUsd: BigNumberish],
    [void],
    "nonpayable"
  >;

  swapOrders: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [
      [string, bigint, bigint, bigint, boolean, boolean, bigint] & {
        account: string;
        amountIn: bigint;
        minOut: bigint;
        triggerRatio: bigint;
        triggerAboveThreshold: boolean;
        shouldUnwrap: boolean;
        executionFee: bigint;
      }
    ],
    "view"
  >;

  swapOrdersIndex: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  updateDecreaseOrder: TypedContractMethod<
    [
      _orderIndex: BigNumberish,
      _collateralDelta: BigNumberish,
      _sizeDelta: BigNumberish,
      _triggerPrice: BigNumberish,
      _triggerAboveThreshold: boolean
    ],
    [void],
    "nonpayable"
  >;

  updateIncreaseOrder: TypedContractMethod<
    [
      _orderIndex: BigNumberish,
      _sizeDelta: BigNumberish,
      _triggerPrice: BigNumberish,
      _triggerAboveThreshold: boolean
    ],
    [void],
    "nonpayable"
  >;

  updateSwapOrder: TypedContractMethod<
    [
      _orderIndex: BigNumberish,
      _minOut: BigNumberish,
      _triggerRatio: BigNumberish,
      _triggerAboveThreshold: boolean
    ],
    [void],
    "nonpayable"
  >;

  usdg: TypedContractMethod<[], [string], "view">;

  validatePositionOrderPrice: TypedContractMethod<
    [
      _triggerAboveThreshold: boolean,
      _triggerPrice: BigNumberish,
      _indexToken: AddressLike,
      _maximizePrice: boolean,
      _raise: boolean
    ],
    [[bigint, boolean]],
    "view"
  >;

  validateSwapOrderPriceWithTriggerAboveThreshold: TypedContractMethod<
    [_path: AddressLike[], _triggerRatio: BigNumberish],
    [boolean],
    "view"
  >;

  vault: TypedContractMethod<[], [string], "view">;

  weth: TypedContractMethod<[], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "PRICE_PRECISION"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "USDG_PRECISION"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "cancelDecreaseOrder"
  ): TypedContractMethod<[_orderIndex: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "cancelIncreaseOrder"
  ): TypedContractMethod<[_orderIndex: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "cancelMultiple"
  ): TypedContractMethod<
    [
      _swapOrderIndexes: BigNumberish[],
      _increaseOrderIndexes: BigNumberish[],
      _decreaseOrderIndexes: BigNumberish[]
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "cancelSwapOrder"
  ): TypedContractMethod<[_orderIndex: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "createDecreaseOrder"
  ): TypedContractMethod<
    [
      _indexToken: AddressLike,
      _sizeDelta: BigNumberish,
      _collateralToken: AddressLike,
      _collateralDelta: BigNumberish,
      _isLong: boolean,
      _triggerPrice: BigNumberish,
      _triggerAboveThreshold: boolean
    ],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "createIncreaseOrder"
  ): TypedContractMethod<
    [
      _path: AddressLike[],
      _amountIn: BigNumberish,
      _indexToken: AddressLike,
      _minOut: BigNumberish,
      _sizeDelta: BigNumberish,
      _collateralToken: AddressLike,
      _isLong: boolean,
      _triggerPrice: BigNumberish,
      _triggerAboveThreshold: boolean,
      _executionFee: BigNumberish,
      _shouldWrap: boolean
    ],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "createSwapOrder"
  ): TypedContractMethod<
    [
      _path: AddressLike[],
      _amountIn: BigNumberish,
      _minOut: BigNumberish,
      _triggerRatio: BigNumberish,
      _triggerAboveThreshold: boolean,
      _executionFee: BigNumberish,
      _shouldWrap: boolean,
      _shouldUnwrap: boolean
    ],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "decreaseOrders"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [
      [
        string,
        string,
        bigint,
        string,
        bigint,
        boolean,
        bigint,
        boolean,
        bigint
      ] & {
        account: string;
        collateralToken: string;
        collateralDelta: bigint;
        indexToken: string;
        sizeDelta: bigint;
        isLong: boolean;
        triggerPrice: bigint;
        triggerAboveThreshold: boolean;
        executionFee: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "decreaseOrdersIndex"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "executeDecreaseOrder"
  ): TypedContractMethod<
    [
      _address: AddressLike,
      _orderIndex: BigNumberish,
      _feeReceiver: AddressLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "executeIncreaseOrder"
  ): TypedContractMethod<
    [
      _address: AddressLike,
      _orderIndex: BigNumberish,
      _feeReceiver: AddressLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "executeSwapOrder"
  ): TypedContractMethod<
    [
      _account: AddressLike,
      _orderIndex: BigNumberish,
      _feeReceiver: AddressLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getDecreaseOrder"
  ): TypedContractMethod<
    [_account: AddressLike, _orderIndex: BigNumberish],
    [
      [string, bigint, string, bigint, boolean, bigint, boolean, bigint] & {
        collateralToken: string;
        collateralDelta: bigint;
        indexToken: string;
        sizeDelta: bigint;
        isLong: boolean;
        triggerPrice: bigint;
        triggerAboveThreshold: boolean;
        executionFee: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getIncreaseOrder"
  ): TypedContractMethod<
    [_account: AddressLike, _orderIndex: BigNumberish],
    [
      [
        string,
        bigint,
        string,
        string,
        bigint,
        boolean,
        bigint,
        boolean,
        bigint
      ] & {
        purchaseToken: string;
        purchaseTokenAmount: bigint;
        collateralToken: string;
        indexToken: string;
        sizeDelta: bigint;
        isLong: boolean;
        triggerPrice: bigint;
        triggerAboveThreshold: boolean;
        executionFee: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getSwapOrder"
  ): TypedContractMethod<
    [_account: AddressLike, _orderIndex: BigNumberish],
    [
      [
        string,
        string,
        string,
        bigint,
        bigint,
        bigint,
        boolean,
        boolean,
        bigint
      ] & {
        path0: string;
        path1: string;
        path2: string;
        amountIn: bigint;
        minOut: bigint;
        triggerRatio: bigint;
        triggerAboveThreshold: boolean;
        shouldUnwrap: boolean;
        executionFee: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getUsdgMinPrice"
  ): TypedContractMethod<[_otherToken: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "gov"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "increaseOrders"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [
      [
        string,
        string,
        bigint,
        string,
        string,
        bigint,
        boolean,
        bigint,
        boolean,
        bigint
      ] & {
        account: string;
        purchaseToken: string;
        purchaseTokenAmount: bigint;
        collateralToken: string;
        indexToken: string;
        sizeDelta: bigint;
        isLong: boolean;
        triggerPrice: bigint;
        triggerAboveThreshold: boolean;
        executionFee: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "increaseOrdersIndex"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<
    [
      _router: AddressLike,
      _vault: AddressLike,
      _weth: AddressLike,
      _usdg: AddressLike,
      _minExecutionFee: BigNumberish,
      _minPurchaseTokenAmountUsd: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "isInitialized"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "minExecutionFee"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "minPurchaseTokenAmountUsd"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "router"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "setGov"
  ): TypedContractMethod<[_gov: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setMinExecutionFee"
  ): TypedContractMethod<
    [_minExecutionFee: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setMinPurchaseTokenAmountUsd"
  ): TypedContractMethod<
    [_minPurchaseTokenAmountUsd: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "swapOrders"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [
      [string, bigint, bigint, bigint, boolean, boolean, bigint] & {
        account: string;
        amountIn: bigint;
        minOut: bigint;
        triggerRatio: bigint;
        triggerAboveThreshold: boolean;
        shouldUnwrap: boolean;
        executionFee: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "swapOrdersIndex"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "updateDecreaseOrder"
  ): TypedContractMethod<
    [
      _orderIndex: BigNumberish,
      _collateralDelta: BigNumberish,
      _sizeDelta: BigNumberish,
      _triggerPrice: BigNumberish,
      _triggerAboveThreshold: boolean
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updateIncreaseOrder"
  ): TypedContractMethod<
    [
      _orderIndex: BigNumberish,
      _sizeDelta: BigNumberish,
      _triggerPrice: BigNumberish,
      _triggerAboveThreshold: boolean
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updateSwapOrder"
  ): TypedContractMethod<
    [
      _orderIndex: BigNumberish,
      _minOut: BigNumberish,
      _triggerRatio: BigNumberish,
      _triggerAboveThreshold: boolean
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "usdg"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "validatePositionOrderPrice"
  ): TypedContractMethod<
    [
      _triggerAboveThreshold: boolean,
      _triggerPrice: BigNumberish,
      _indexToken: AddressLike,
      _maximizePrice: boolean,
      _raise: boolean
    ],
    [[bigint, boolean]],
    "view"
  >;
  getFunction(
    nameOrSignature: "validateSwapOrderPriceWithTriggerAboveThreshold"
  ): TypedContractMethod<
    [_path: AddressLike[], _triggerRatio: BigNumberish],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "vault"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "weth"
  ): TypedContractMethod<[], [string], "view">;

  getEvent(
    key: "CancelDecreaseOrder"
  ): TypedContractEvent<
    CancelDecreaseOrderEvent.InputTuple,
    CancelDecreaseOrderEvent.OutputTuple,
    CancelDecreaseOrderEvent.OutputObject
  >;
  getEvent(
    key: "CancelIncreaseOrder"
  ): TypedContractEvent<
    CancelIncreaseOrderEvent.InputTuple,
    CancelIncreaseOrderEvent.OutputTuple,
    CancelIncreaseOrderEvent.OutputObject
  >;
  getEvent(
    key: "CancelSwapOrder"
  ): TypedContractEvent<
    CancelSwapOrderEvent.InputTuple,
    CancelSwapOrderEvent.OutputTuple,
    CancelSwapOrderEvent.OutputObject
  >;
  getEvent(
    key: "CreateDecreaseOrder"
  ): TypedContractEvent<
    CreateDecreaseOrderEvent.InputTuple,
    CreateDecreaseOrderEvent.OutputTuple,
    CreateDecreaseOrderEvent.OutputObject
  >;
  getEvent(
    key: "CreateIncreaseOrder"
  ): TypedContractEvent<
    CreateIncreaseOrderEvent.InputTuple,
    CreateIncreaseOrderEvent.OutputTuple,
    CreateIncreaseOrderEvent.OutputObject
  >;
  getEvent(
    key: "CreateSwapOrder"
  ): TypedContractEvent<
    CreateSwapOrderEvent.InputTuple,
    CreateSwapOrderEvent.OutputTuple,
    CreateSwapOrderEvent.OutputObject
  >;
  getEvent(
    key: "ExecuteDecreaseOrder"
  ): TypedContractEvent<
    ExecuteDecreaseOrderEvent.InputTuple,
    ExecuteDecreaseOrderEvent.OutputTuple,
    ExecuteDecreaseOrderEvent.OutputObject
  >;
  getEvent(
    key: "ExecuteIncreaseOrder"
  ): TypedContractEvent<
    ExecuteIncreaseOrderEvent.InputTuple,
    ExecuteIncreaseOrderEvent.OutputTuple,
    ExecuteIncreaseOrderEvent.OutputObject
  >;
  getEvent(
    key: "ExecuteSwapOrder"
  ): TypedContractEvent<
    ExecuteSwapOrderEvent.InputTuple,
    ExecuteSwapOrderEvent.OutputTuple,
    ExecuteSwapOrderEvent.OutputObject
  >;
  getEvent(
    key: "Initialize"
  ): TypedContractEvent<
    InitializeEvent.InputTuple,
    InitializeEvent.OutputTuple,
    InitializeEvent.OutputObject
  >;
  getEvent(
    key: "UpdateDecreaseOrder"
  ): TypedContractEvent<
    UpdateDecreaseOrderEvent.InputTuple,
    UpdateDecreaseOrderEvent.OutputTuple,
    UpdateDecreaseOrderEvent.OutputObject
  >;
  getEvent(
    key: "UpdateGov"
  ): TypedContractEvent<
    UpdateGovEvent.InputTuple,
    UpdateGovEvent.OutputTuple,
    UpdateGovEvent.OutputObject
  >;
  getEvent(
    key: "UpdateIncreaseOrder"
  ): TypedContractEvent<
    UpdateIncreaseOrderEvent.InputTuple,
    UpdateIncreaseOrderEvent.OutputTuple,
    UpdateIncreaseOrderEvent.OutputObject
  >;
  getEvent(
    key: "UpdateMinExecutionFee"
  ): TypedContractEvent<
    UpdateMinExecutionFeeEvent.InputTuple,
    UpdateMinExecutionFeeEvent.OutputTuple,
    UpdateMinExecutionFeeEvent.OutputObject
  >;
  getEvent(
    key: "UpdateMinPurchaseTokenAmountUsd"
  ): TypedContractEvent<
    UpdateMinPurchaseTokenAmountUsdEvent.InputTuple,
    UpdateMinPurchaseTokenAmountUsdEvent.OutputTuple,
    UpdateMinPurchaseTokenAmountUsdEvent.OutputObject
  >;
  getEvent(
    key: "UpdateSwapOrder"
  ): TypedContractEvent<
    UpdateSwapOrderEvent.InputTuple,
    UpdateSwapOrderEvent.OutputTuple,
    UpdateSwapOrderEvent.OutputObject
  >;

  filters: {
    "CancelDecreaseOrder(address,uint256,address,uint256,address,uint256,bool,uint256,bool,uint256)": TypedContractEvent<
      CancelDecreaseOrderEvent.InputTuple,
      CancelDecreaseOrderEvent.OutputTuple,
      CancelDecreaseOrderEvent.OutputObject
    >;
    CancelDecreaseOrder: TypedContractEvent<
      CancelDecreaseOrderEvent.InputTuple,
      CancelDecreaseOrderEvent.OutputTuple,
      CancelDecreaseOrderEvent.OutputObject
    >;

    "CancelIncreaseOrder(address,uint256,address,uint256,address,address,uint256,bool,uint256,bool,uint256)": TypedContractEvent<
      CancelIncreaseOrderEvent.InputTuple,
      CancelIncreaseOrderEvent.OutputTuple,
      CancelIncreaseOrderEvent.OutputObject
    >;
    CancelIncreaseOrder: TypedContractEvent<
      CancelIncreaseOrderEvent.InputTuple,
      CancelIncreaseOrderEvent.OutputTuple,
      CancelIncreaseOrderEvent.OutputObject
    >;

    "CancelSwapOrder(address,uint256,address[],uint256,uint256,uint256,bool,bool,uint256)": TypedContractEvent<
      CancelSwapOrderEvent.InputTuple,
      CancelSwapOrderEvent.OutputTuple,
      CancelSwapOrderEvent.OutputObject
    >;
    CancelSwapOrder: TypedContractEvent<
      CancelSwapOrderEvent.InputTuple,
      CancelSwapOrderEvent.OutputTuple,
      CancelSwapOrderEvent.OutputObject
    >;

    "CreateDecreaseOrder(address,uint256,address,uint256,address,uint256,bool,uint256,bool,uint256)": TypedContractEvent<
      CreateDecreaseOrderEvent.InputTuple,
      CreateDecreaseOrderEvent.OutputTuple,
      CreateDecreaseOrderEvent.OutputObject
    >;
    CreateDecreaseOrder: TypedContractEvent<
      CreateDecreaseOrderEvent.InputTuple,
      CreateDecreaseOrderEvent.OutputTuple,
      CreateDecreaseOrderEvent.OutputObject
    >;

    "CreateIncreaseOrder(address,uint256,address,uint256,address,address,uint256,bool,uint256,bool,uint256)": TypedContractEvent<
      CreateIncreaseOrderEvent.InputTuple,
      CreateIncreaseOrderEvent.OutputTuple,
      CreateIncreaseOrderEvent.OutputObject
    >;
    CreateIncreaseOrder: TypedContractEvent<
      CreateIncreaseOrderEvent.InputTuple,
      CreateIncreaseOrderEvent.OutputTuple,
      CreateIncreaseOrderEvent.OutputObject
    >;

    "CreateSwapOrder(address,uint256,address[],uint256,uint256,uint256,bool,bool,uint256)": TypedContractEvent<
      CreateSwapOrderEvent.InputTuple,
      CreateSwapOrderEvent.OutputTuple,
      CreateSwapOrderEvent.OutputObject
    >;
    CreateSwapOrder: TypedContractEvent<
      CreateSwapOrderEvent.InputTuple,
      CreateSwapOrderEvent.OutputTuple,
      CreateSwapOrderEvent.OutputObject
    >;

    "ExecuteDecreaseOrder(address,uint256,address,uint256,address,uint256,bool,uint256,bool,uint256,uint256)": TypedContractEvent<
      ExecuteDecreaseOrderEvent.InputTuple,
      ExecuteDecreaseOrderEvent.OutputTuple,
      ExecuteDecreaseOrderEvent.OutputObject
    >;
    ExecuteDecreaseOrder: TypedContractEvent<
      ExecuteDecreaseOrderEvent.InputTuple,
      ExecuteDecreaseOrderEvent.OutputTuple,
      ExecuteDecreaseOrderEvent.OutputObject
    >;

    "ExecuteIncreaseOrder(address,uint256,address,uint256,address,address,uint256,bool,uint256,bool,uint256,uint256)": TypedContractEvent<
      ExecuteIncreaseOrderEvent.InputTuple,
      ExecuteIncreaseOrderEvent.OutputTuple,
      ExecuteIncreaseOrderEvent.OutputObject
    >;
    ExecuteIncreaseOrder: TypedContractEvent<
      ExecuteIncreaseOrderEvent.InputTuple,
      ExecuteIncreaseOrderEvent.OutputTuple,
      ExecuteIncreaseOrderEvent.OutputObject
    >;

    "ExecuteSwapOrder(address,uint256,address[],uint256,uint256,uint256,uint256,bool,bool,uint256)": TypedContractEvent<
      ExecuteSwapOrderEvent.InputTuple,
      ExecuteSwapOrderEvent.OutputTuple,
      ExecuteSwapOrderEvent.OutputObject
    >;
    ExecuteSwapOrder: TypedContractEvent<
      ExecuteSwapOrderEvent.InputTuple,
      ExecuteSwapOrderEvent.OutputTuple,
      ExecuteSwapOrderEvent.OutputObject
    >;

    "Initialize(address,address,address,address,uint256,uint256)": TypedContractEvent<
      InitializeEvent.InputTuple,
      InitializeEvent.OutputTuple,
      InitializeEvent.OutputObject
    >;
    Initialize: TypedContractEvent<
      InitializeEvent.InputTuple,
      InitializeEvent.OutputTuple,
      InitializeEvent.OutputObject
    >;

    "UpdateDecreaseOrder(address,uint256,address,uint256,address,uint256,bool,uint256,bool)": TypedContractEvent<
      UpdateDecreaseOrderEvent.InputTuple,
      UpdateDecreaseOrderEvent.OutputTuple,
      UpdateDecreaseOrderEvent.OutputObject
    >;
    UpdateDecreaseOrder: TypedContractEvent<
      UpdateDecreaseOrderEvent.InputTuple,
      UpdateDecreaseOrderEvent.OutputTuple,
      UpdateDecreaseOrderEvent.OutputObject
    >;

    "UpdateGov(address)": TypedContractEvent<
      UpdateGovEvent.InputTuple,
      UpdateGovEvent.OutputTuple,
      UpdateGovEvent.OutputObject
    >;
    UpdateGov: TypedContractEvent<
      UpdateGovEvent.InputTuple,
      UpdateGovEvent.OutputTuple,
      UpdateGovEvent.OutputObject
    >;

    "UpdateIncreaseOrder(address,uint256,address,address,bool,uint256,uint256,bool)": TypedContractEvent<
      UpdateIncreaseOrderEvent.InputTuple,
      UpdateIncreaseOrderEvent.OutputTuple,
      UpdateIncreaseOrderEvent.OutputObject
    >;
    UpdateIncreaseOrder: TypedContractEvent<
      UpdateIncreaseOrderEvent.InputTuple,
      UpdateIncreaseOrderEvent.OutputTuple,
      UpdateIncreaseOrderEvent.OutputObject
    >;

    "UpdateMinExecutionFee(uint256)": TypedContractEvent<
      UpdateMinExecutionFeeEvent.InputTuple,
      UpdateMinExecutionFeeEvent.OutputTuple,
      UpdateMinExecutionFeeEvent.OutputObject
    >;
    UpdateMinExecutionFee: TypedContractEvent<
      UpdateMinExecutionFeeEvent.InputTuple,
      UpdateMinExecutionFeeEvent.OutputTuple,
      UpdateMinExecutionFeeEvent.OutputObject
    >;

    "UpdateMinPurchaseTokenAmountUsd(uint256)": TypedContractEvent<
      UpdateMinPurchaseTokenAmountUsdEvent.InputTuple,
      UpdateMinPurchaseTokenAmountUsdEvent.OutputTuple,
      UpdateMinPurchaseTokenAmountUsdEvent.OutputObject
    >;
    UpdateMinPurchaseTokenAmountUsd: TypedContractEvent<
      UpdateMinPurchaseTokenAmountUsdEvent.InputTuple,
      UpdateMinPurchaseTokenAmountUsdEvent.OutputTuple,
      UpdateMinPurchaseTokenAmountUsdEvent.OutputObject
    >;

    "UpdateSwapOrder(address,uint256,address[],uint256,uint256,uint256,bool,bool,uint256)": TypedContractEvent<
      UpdateSwapOrderEvent.InputTuple,
      UpdateSwapOrderEvent.OutputTuple,
      UpdateSwapOrderEvent.OutputObject
    >;
    UpdateSwapOrder: TypedContractEvent<
      UpdateSwapOrderEvent.InputTuple,
      UpdateSwapOrderEvent.OutputTuple,
      UpdateSwapOrderEvent.OutputObject
    >;
  };
}
